{"version":3,"file":"background.js","sources":["../src/main/kotlin/background.kt","../../../../../../dummy.kt","../src/main/kotlin/coroutines.kt","coroutines/experimental/CoroutinesLibrary.kt","../src/main/kotlin/headers/chrome-ext.kt"],"sourcesContent":[null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmName(\"CoroutinesKt\")\npackage kotlin.coroutines.experimental\n\nimport kotlin.coroutines.experimental.intrinsics.COROUTINE_SUSPENDED\nimport kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn\nimport kotlin.coroutines.experimental.intrinsics.createCoroutineUnchecked\n\n/**\n * Starts coroutine with receiver type [R] and result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(receiver, completion).resume(Unit)\n}\n\n/**\n * Starts coroutine without receiver and with result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend  () -> T).startCoroutine(\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(completion).resume(Unit)\n}\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(receiver, completion), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(completion), COROUTINE_SUSPENDED)\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Repeated invocation of any resume function produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\npublic inline suspend fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n        suspendCoroutineOrReturn { c: Continuation<T> ->\n            val safe = SafeContinuation(c)\n            block(safe)\n            safe.getResult()\n        }\n\n// INTERNAL DECLARATIONS\n\n@kotlin.internal.InlineOnly\ninternal inline fun processBareContinuationResume(completion: Continuation<*>, block: () -> Any?) {\n    try {\n        val result = block()\n        if (result !== COROUTINE_SUSPENDED) {\n            @Suppress(\"UNCHECKED_CAST\")\n            (completion as Continuation<Any?>).resume(result)\n        }\n    } catch (t: Throwable) {\n        completion.resumeWithException(t)\n    }\n}\n",null],"names":[],"mappings":"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"}