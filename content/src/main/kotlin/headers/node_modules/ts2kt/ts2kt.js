#!/usr/bin/env node
(function (_, Kotlin, $module$typescript, $module$path, $module$fs, $module$process) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var getDefaultCompilerOptions = $module$typescript.getDefaultCompilerOptions;
  var repeat = Kotlin.kotlin.text.repeat_94bcnn$;
  var listOf = Kotlin.kotlin.collections.listOf_mh5how$;
  var MutableList = Kotlin.kotlin.collections.MutableList;
  var get_indices = Kotlin.kotlin.collections.get_indices_gzk92b$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var first = Kotlin.kotlin.collections.first_2p1efm$;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var Enum = Kotlin.kotlin.Enum;
  var toList = Kotlin.kotlin.collections.toList_us0mfu$;
  var single = Kotlin.kotlin.collections.single_2p1efm$;
  var setOf = Kotlin.kotlin.collections.setOf_i5x0yv$;
  var contains = Kotlin.kotlin.text.contains_li3zpu$;
  var SyntaxKind$FunctionType = $module$typescript.SyntaxKind.FunctionType;
  var SyntaxKind$FirstLiteralToken = $module$typescript.SyntaxKind.FirstLiteralToken;
  var SyntaxKind$StringLiteral = $module$typescript.SyntaxKind.StringLiteral;
  var NodeFlags$AccessibilityModifier = $module$typescript.NodeFlags.AccessibilityModifier;
  var SyntaxKind$ArrayType = $module$typescript.SyntaxKind.ArrayType;
  var SyntaxKind$TypeReference = $module$typescript.SyntaxKind.TypeReference;
  var plus_0 = Kotlin.kotlin.collections.plus_qloxvw$;
  var SyntaxKind$ConstructorType = $module$typescript.SyntaxKind.ConstructorType;
  var SyntaxKind$UnionType = $module$typescript.SyntaxKind.UnionType;
  var SyntaxKind$IntersectionType = $module$typescript.SyntaxKind.IntersectionType;
  var SyntaxKind$AnyKeyword = $module$typescript.SyntaxKind.AnyKeyword;
  var SyntaxKind$NumberKeyword = $module$typescript.SyntaxKind.NumberKeyword;
  var SyntaxKind$StringKeyword = $module$typescript.SyntaxKind.StringKeyword;
  var SyntaxKind$BooleanKeyword = $module$typescript.SyntaxKind.BooleanKeyword;
  var SyntaxKind$VoidKeyword = $module$typescript.SyntaxKind.VoidKeyword;
  var SyntaxKind$NullKeyword = $module$typescript.SyntaxKind.NullKeyword;
  var SyntaxKind$UndefinedKeyword = $module$typescript.SyntaxKind.UndefinedKeyword;
  var SyntaxKind$ExpressionWithTypeArguments = $module$typescript.SyntaxKind.ExpressionWithTypeArguments;
  var SyntaxKind$Identifier = $module$typescript.SyntaxKind.Identifier;
  var SyntaxKind$TypeLiteral = $module$typescript.SyntaxKind.TypeLiteral;
  var SyntaxKind$ParenthesizedType = $module$typescript.SyntaxKind.ParenthesizedType;
  var SyntaxKind$LiteralType = $module$typescript.SyntaxKind.LiteralType;
  var SyntaxKind$ThisType = $module$typescript.SyntaxKind.ThisType;
  var SyntaxKind$TypePredicate = $module$typescript.SyntaxKind.TypePredicate;
  var SyntaxKind$PropertyAccessExpression = $module$typescript.SyntaxKind.PropertyAccessExpression;
  var distinct = Kotlin.kotlin.collections.distinct_7wnvza$;
  var dropLast = Kotlin.kotlin.collections.dropLast_yzln2o$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var SyntaxKind$ClassDeclaration = $module$typescript.SyntaxKind.ClassDeclaration;
  var SyntaxKind$InterfaceDeclaration = $module$typescript.SyntaxKind.InterfaceDeclaration;
  var forEachChild = $module$typescript.forEachChild;
  var SyntaxKind$ModuleDeclaration = $module$typescript.SyntaxKind.ModuleDeclaration;
  var SyntaxKind$FunctionDeclaration = $module$typescript.SyntaxKind.FunctionDeclaration;
  var SyntaxKind$VariableStatement = $module$typescript.SyntaxKind.VariableStatement;
  var SyntaxKind$EnumDeclaration = $module$typescript.SyntaxKind.EnumDeclaration;
  var SyntaxKind$TypeAliasDeclaration = $module$typescript.SyntaxKind.TypeAliasDeclaration;
  var SyntaxKind$HeritageClause = $module$typescript.SyntaxKind.HeritageClause;
  var SyntaxKind$Constructor = $module$typescript.SyntaxKind.Constructor;
  var SyntaxKind$ConstructSignature = $module$typescript.SyntaxKind.ConstructSignature;
  var SyntaxKind$MethodDeclaration = $module$typescript.SyntaxKind.MethodDeclaration;
  var SyntaxKind$MethodSignature = $module$typescript.SyntaxKind.MethodSignature;
  var SyntaxKind$PropertyDeclaration = $module$typescript.SyntaxKind.PropertyDeclaration;
  var SyntaxKind$PropertySignature = $module$typescript.SyntaxKind.PropertySignature;
  var SyntaxKind$IndexSignature = $module$typescript.SyntaxKind.IndexSignature;
  var SyntaxKind$CallSignature = $module$typescript.SyntaxKind.CallSignature;
  var SyntaxKind$ExportAssignment = $module$typescript.SyntaxKind.ExportAssignment;
  var SyntaxKind$ImportEqualsDeclaration = $module$typescript.SyntaxKind.ImportEqualsDeclaration;
  var SyntaxKind$EndOfFileToken = $module$typescript.SyntaxKind.EndOfFileToken;
  var listOf_0 = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var SyntaxKind$StaticKeyword = $module$typescript.SyntaxKind.StaticKeyword;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var SyntaxKind$DeclareKeyword = $module$typescript.SyntaxKind.DeclareKeyword;
  var SyntaxKind$ModuleBlock = $module$typescript.SyntaxKind.ModuleBlock;
  var SyntaxKind$ExportKeyword = $module$typescript.SyntaxKind.ExportKeyword;
  var mutableListOf = Kotlin.kotlin.collections.mutableListOf_i5x0yv$;
  var zip = Kotlin.kotlin.collections.zip_45mdf7$;
  var toList_0 = Kotlin.kotlin.collections.toList_7wnvza$;
  var plus_1 = Kotlin.kotlin.collections.plus_drqvgf$;
  var sorted = Kotlin.kotlin.collections.sorted_exjks8$;
  var HashMap_init = Kotlin.kotlin.collections.HashMap_init_q3lmfv$;
  var trimIndent = Kotlin.kotlin.text.trimIndent_pdl1vz$;
  var IllegalStateException = Kotlin.kotlin.IllegalStateException;
  var Exception = Kotlin.kotlin.Exception;
  var toList_1 = Kotlin.kotlin.collections.toList_abgq59$;
  var startsWith = Kotlin.kotlin.text.startsWith_7epoxm$;
  var drop = Kotlin.kotlin.collections.drop_8ujjk8$;
  var joinToString_0 = Kotlin.kotlin.collections.joinToString_cgipc5$;
  var endsWith = Kotlin.kotlin.text.endsWith_7epoxm$;
  var getDefaultLibFilePath = $module$typescript.getDefaultLibFilePath;
  var fromString = $module$typescript.ScriptSnapshot.fromString;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var createDocumentRegistry = $module$typescript.createDocumentRegistry;
  var createLanguageService = $module$typescript.createLanguageService;
  var normalizePath = $module$typescript.normalizePath;
  var hashMapOf = Kotlin.kotlin.collections.hashMapOf_qfcya0$;
  var getDirectoryPath = $module$typescript.getDirectoryPath;
  var preProcessFile = $module$typescript.preProcessFile;
  var TypeFlags$Any = $module$typescript.TypeFlags.Any;
  var get_indices_0 = Kotlin.kotlin.collections.get_indices_m7z4lg$;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var sortedDescending = Kotlin.kotlin.collections.sortedDescending_exjks8$;
  KtPackagePart.prototype = Object.create(AbstractKtNode.prototype);
  KtPackagePart.prototype.constructor = KtPackagePart;
  KtArgument.prototype = Object.create(AbstractKtNode.prototype);
  KtArgument.prototype.constructor = KtArgument;
  KtAnnotation.prototype = Object.create(AbstractKtNode.prototype);
  KtAnnotation.prototype.constructor = KtAnnotation;
  KtClassKind.prototype = Object.create(Enum.prototype);
  KtClassKind.prototype.constructor = KtClassKind;
  KtClassifier.prototype = Object.create(AbstractKtNode.prototype);
  KtClassifier.prototype.constructor = KtClassifier;
  KtFunParam.prototype = Object.create(AbstractKtNode.prototype);
  KtFunParam.prototype.constructor = KtFunParam;
  KtCallSignature.prototype = Object.create(AbstractKtNode.prototype);
  KtCallSignature.prototype.constructor = KtCallSignature;
  KtFunction.prototype = Object.create(AbstractKtNode.prototype);
  KtFunction.prototype.constructor = KtFunction;
  KtVariable.prototype = Object.create(AbstractKtNode.prototype);
  KtVariable.prototype.constructor = KtVariable;
  KtEnumEntry.prototype = Object.create(AbstractKtNode.prototype);
  KtEnumEntry.prototype.constructor = KtEnumEntry;
  KtHeritageType.prototype = Object.create(AbstractKtNode.prototype);
  KtHeritageType.prototype.constructor = KtHeritageType;
  KtTypeUnion_0.prototype = Object.create(AbstractKtNode.prototype);
  KtTypeUnion_0.prototype.constructor = KtTypeUnion_0;
  KtType.prototype = Object.create(AbstractKtNode.prototype);
  KtType.prototype.constructor = KtType;
  KtTypeParam.prototype = Object.create(AbstractKtNode.prototype);
  KtTypeParam.prototype.constructor = KtTypeParam;
  KtTypeAnnotation.prototype = Object.create(AbstractKtNode.prototype);
  KtTypeAnnotation.prototype.constructor = KtTypeAnnotation;
  TsClassifierToKt.prototype = Object.create(TypeScriptToKotlinBase.prototype);
  TsClassifierToKt.prototype.constructor = TsClassifierToKt;
  TsClassToKt.prototype = Object.create(TsClassifierToKt.prototype);
  TsClassToKt.prototype.constructor = TsClassToKt;
  TsInterfaceToKt.prototype = Object.create(TsClassifierToKt.prototype);
  TsInterfaceToKt.prototype.constructor = TsInterfaceToKt;
  TsInterfaceToKtExtensions.prototype = Object.create(TsInterfaceToKt.prototype);
  TsInterfaceToKtExtensions.prototype.constructor = TsInterfaceToKtExtensions;
  TypeScriptToKotlin.prototype = Object.create(TypeScriptToKotlinBase.prototype);
  TypeScriptToKotlin.prototype.constructor = TypeScriptToKotlin;
  DiagnosticLevel.prototype = Object.create(Enum.prototype);
  DiagnosticLevel.prototype.constructor = DiagnosticLevel;
  function FileSystemBasedLSH(file2scriptSnapshot, currentDirectory) {
    this.currentDirectory = currentDirectory;
    this.filesCache_0 = [];
    this.file2scriptSnapshot_pcxi1b$_0 = file2scriptSnapshot;
    this.log_pcxi1b$_0 = FileSystemBasedLSH$log$lambda;
  }
  Object.defineProperty(FileSystemBasedLSH.prototype, 'file2scriptSnapshot', {
    get: function () {
      return this.file2scriptSnapshot_pcxi1b$_0;
    },
    set: function (value) {
      this.file2scriptSnapshot_pcxi1b$_0 = value;
      var $receiver = value.keys;
      this.filesCache_0 = Kotlin.kotlin.collections.copyToArray($receiver);
    }
  });
  FileSystemBasedLSH.prototype.getCompilationSettings = function () {
    return getDefaultCompilerOptions();
  };
  FileSystemBasedLSH.prototype.getScriptFileNames = function () {
    return this.filesCache_0;
  };
  FileSystemBasedLSH.prototype.getScriptVersion = function (fileName) {
    return '0';
  };
  FileSystemBasedLSH.prototype.getScriptSnapshot = function (fileName) {
    return this.file2scriptSnapshot.get_11rb$(fileName);
  };
  FileSystemBasedLSH.prototype.getCurrentDirectory = function () {
    return this.currentDirectory;
  };
  FileSystemBasedLSH.prototype.getDefaultLibFileName = function (options) {
    return 'lib.d.ts';
  };
  Object.defineProperty(FileSystemBasedLSH.prototype, 'log', {
    get: function () {
      return this.log_pcxi1b$_0;
    }
  });
  function FileSystemBasedLSH$log$lambda(message) {
    console.log(message);
  }
  FileSystemBasedLSH.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FileSystemBasedLSH',
    interfaces: []
  };
  function KtVisitor() {
  }
  KtVisitor.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'KtVisitor',
    interfaces: []
  };
  function Output(indentWidth) {
    if (indentWidth === void 0)
      indentWidth = 4;
    this.buffer_0 = '';
    this.singleIndent_0 = repeat(' ', indentWidth);
    var tmp$;
    this.indentCache_0 = Kotlin.isType(tmp$ = listOf(''), MutableList) ? tmp$ : Kotlin.throwCCE();
    this.currentDepth_0 = 0;
    this.indent_0 = '';
  }
  Output.prototype.toString = function () {
    return this.buffer_0;
  };
  Output.prototype.print_61zpoe$ = function (value) {
    this.buffer_0 += value;
  };
  Output.prototype.println_61zpoe$ = function (value) {
    this.print_61zpoe$(value);
    this.println();
  };
  Output.prototype.println = function () {
    this.print_61zpoe$('\n');
  };
  Output.prototype.printIndent = function () {
    this.print_61zpoe$(this.indent_0);
  };
  Output.prototype.printWithIndent_61zpoe$ = function (value) {
    this.printIndent();
    this.print_61zpoe$(value);
  };
  Output.prototype.printlnWithIndent_61zpoe$ = function (value) {
    this.printWithIndent_61zpoe$(value);
    this.println();
  };
  Output.prototype.printlnWithIndent = function () {
    this.printWithIndent_61zpoe$('\n');
  };
  Output.prototype.getIndent_0 = function (depth) {
    assert(depth >= 0, 'The indent index should be >= 0');
    if (depth < this.indentCache_0.size)
      return this.indentCache_0.get_za3lpa$(depth);
    for (var i = this.indentCache_0.size; i <= depth; i++) {
      this.indentCache_0.add_11rb$(this.indentCache_0.get_za3lpa$(i - 1 | 0) + this.singleIndent_0);
    }
    return this.indentCache_0.get_za3lpa$(depth);
  };
  Output.prototype.pushIndent = function () {
    this.currentDepth_0 = this.currentDepth_0 + 1 | 0;
    this.indent_0 = this.getIndent_0(this.currentDepth_0);
  };
  Output.prototype.popIndent = function () {
    this.currentDepth_0 = this.currentDepth_0 - 1 | 0;
    this.indent_0 = this.getIndent_0(this.currentDepth_0);
  };
  Output.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Output',
    interfaces: []
  };
  function indent($receiver, f) {
    $receiver.pushIndent();
    f($receiver);
    $receiver.popIndent();
  }
  var NO_IMPL;
  var EQ_NO_IMPL;
  var NO_IMPL_PROPERTY_GETTER;
  var NO_IMPL_PROPERTY_SETTER;
  var EXTERNAL;
  var OPEN;
  var OVERRIDE;
  var OPERATOR;
  var VAR;
  var VAL;
  var FUN;
  var VARARG;
  function Stringify(packagePartPrefix, topLevel, additionalImports, suppressedDiagnostics, out) {
    if (additionalImports === void 0) {
      additionalImports = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    if (suppressedDiagnostics === void 0) {
      suppressedDiagnostics = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    if (out === void 0)
      out = new Output();
    this.packagePartPrefix_0 = packagePartPrefix;
    this.topLevel_0 = topLevel;
    this.additionalImports_0 = additionalImports;
    this.suppressedDiagnostics_0 = suppressedDiagnostics;
    this.out_0 = out;
  }
  Object.defineProperty(Stringify.prototype, 'result', {
    get: function () {
      return this.out_0.toString();
    }
  });
  Stringify.prototype.acceptForEach_0 = function ($receiver, visitor, delimiter, startWithIfNotEmpty, endWithIfNotEmpty) {
    if (delimiter === void 0)
      delimiter = null;
    if (startWithIfNotEmpty === void 0)
      startWithIfNotEmpty = null;
    if (endWithIfNotEmpty === void 0)
      endWithIfNotEmpty = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (!$receiver.isEmpty() && startWithIfNotEmpty != null) {
      this.out_0.print_61zpoe$(startWithIfNotEmpty);
    }
    tmp$ = get_indices($receiver);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      if (delimiter != null && i > 0) {
        this.out_0.print_61zpoe$(delimiter);
      }
      $receiver.get_za3lpa$(i).accept_nbqbgi$(visitor);
    }
    if (!$receiver.isEmpty() && endWithIfNotEmpty != null) {
      this.out_0.print_61zpoe$(endWithIfNotEmpty);
    }
  };
  Stringify.prototype.visitNode_yawk5q$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Stringify.prototype.visitAnnotation_tw9up$ = function (annotation) {
    if (Kotlin.equals(annotation, NATIVE_ANNOTATION))
      return;
    this.out_0.printWithIndent_61zpoe$('@');
    this.printAnnotation_0(annotation);
    this.out_0.println();
  };
  Stringify.prototype.printExternalIfNeed_0 = function () {
    if (this.topLevel_0) {
      this.out_0.print_61zpoe$(EXTERNAL + ' ');
    }
  };
  Stringify.prototype.printAnnotation_0 = function (annotation) {
    this.out_0.print_61zpoe$(get_escapedName(annotation));
    this.acceptForEach_0(annotation.parameters, this, ', ', '(', ')');
  };
  function Stringify$visitClassifier$lambda$lambda(this$, this$Stringify) {
    return function ($receiver) {
      if (this$.paramsOfConstructors.size > 1) {
        var $receiver_0 = this$.paramsOfConstructors;
        var tmp$;
        tmp$ = $receiver_0.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var this$Stringify_0 = this$Stringify;
          $receiver.printWithIndent_61zpoe$('constructor(');
          this$Stringify_0.acceptForEach_0(element, this$Stringify_0, ', ');
          $receiver.println_61zpoe$(')');
        }
      }
      var tmp$_0 = this$Stringify;
      var $receiver_1 = this$.members;
      var predicate = isNotAnnotatedAsFake;
      var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var tmp$_1;
      tmp$_1 = $receiver_1.iterator();
      while (tmp$_1.hasNext()) {
        var element_0 = tmp$_1.next();
        if (predicate(element_0)) {
          destination.add_11rb$(element_0);
        }
      }
      tmp$_0.acceptForEach_0(destination, this$Stringify.innerStringifier_0(), this$.kind === KtClassKind$ENUM_getInstance() ? ',\n' : '', void 0, this$.kind === KtClassKind$ENUM_getInstance() ? '\n' : '');
    };
  }
  Stringify.prototype.visitClassifier_k8ctg1$ = function (classifier) {
    var tmp$;
    this.acceptForEach_0(classifier.annotations, this);
    this.out_0.printIndent();
    this.printExternalIfNeed_0();
    if (classifier.hasOpenModifier) {
      this.out_0.print_61zpoe$(OPEN + ' ');
    }
    this.out_0.print_61zpoe$(classifier.kind.keyword);
    if (classifier.name.length > 0) {
      this.out_0.print_61zpoe$(' ');
    }
    this.out_0.print_61zpoe$(get_escapedName(classifier));
    (tmp$ = classifier.typeParams) != null ? this.acceptForEach_0(tmp$, this, ', ', '<', '>') : null;
    if (classifier.paramsOfConstructors.size === 1) {
      this.acceptForEach_0(classifier.paramsOfConstructors.get_za3lpa$(0), this, ', ', '(', ')');
    }
    this.acceptForEach_0(classifier.parents, this, ', ', ' : ');
    var bracesRequired = classifier.kind.bracesAlwaysRequired || classifier.paramsOfConstructors.size > 1 || !classifier.members.isEmpty();
    if (bracesRequired) {
      this.out_0.println_61zpoe$(' {');
    }
    indent(this.out_0, Stringify$visitClassifier$lambda$lambda(classifier, this));
    if (bracesRequired) {
      this.out_0.printWithIndent_61zpoe$('}');
    }
    this.out_0.println();
  };
  Stringify.prototype.visitFunction_g5u9tk$ = function (function_0) {
    this.acceptForEach_0(function_0.annotations, this);
    this.out_0.printIndent();
    this.printExternalIfNeed_0();
    if (function_0.isOverride) {
      this.out_0.print_61zpoe$(OVERRIDE + ' ');
    }
     else if (function_0.hasOpenModifier) {
      this.out_0.print_61zpoe$(OPEN + ' ');
    }
    if (function_0.isOperator) {
      this.out_0.print_61zpoe$(OPERATOR + ' ');
    }
    this.out_0.print_61zpoe$(FUN + ' ');
    this.printTypeParams_340l6o$(function_0.callSignature, true);
    if (function_0.extendsType != null) {
      function_0.extendsType.accept_nbqbgi$(this);
      this.out_0.print_61zpoe$('.');
    }
    this.out_0.print_61zpoe$(get_escapedName(function_0));
    this.printToOut_6dmgio$(function_0.callSignature, false, function_0.needsNoImpl, !function_0.isOverride);
    if (function_0.needsNoImpl) {
      this.out_0.print_61zpoe$(EQ_NO_IMPL);
    }
    this.out_0.println();
  };
  Stringify.prototype.visitVariable_bd4hv0$ = function (variable) {
    var tmp$, tmp$_0;
    this.acceptForEach_0(variable.annotations, this);
    this.out_0.printIndent();
    this.printExternalIfNeed_0();
    if (variable.isOverride) {
      this.out_0.print_61zpoe$(OVERRIDE + ' ');
    }
     else if (variable.hasOpenModifier) {
      this.out_0.print_61zpoe$(OPEN + ' ');
    }
    this.out_0.print_61zpoe$((variable.isVar ? VAR : VAL) + ' ');
    (tmp$ = variable.typeParams) != null ? this.acceptForEach_0(tmp$, this, ', ', '<', '> ') : null;
    if ((tmp$_0 = variable.extendsType) != null) {
      tmp$_0.accept_nbqbgi$(this);
      this.out_0.print_61zpoe$('.');
    }
    this.out_0.print_61zpoe$(escapeIfNeed(variable.name));
    this.printToOut_laliwh$(variable.type, !variable.needsNoImpl);
    if (variable.needsNoImpl) {
      if (variable.isInInterface) {
        this.out_0.print_61zpoe$(NO_IMPL_PROPERTY_GETTER);
        if (variable.isVar) {
          this.out_0.print_61zpoe$(';' + NO_IMPL_PROPERTY_SETTER);
        }
      }
       else {
        this.out_0.print_61zpoe$(EQ_NO_IMPL);
      }
    }
    this.out_0.println();
  };
  function Stringify$visitPackagePart$lambda(it) {
    return '"' + it + '"';
  }
  Stringify.prototype.visitPackagePart_56vfc9$ = function (packagePart) {
    var tmp$, tmp$_0;
    var $receiver = packagePart.annotations;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_1;
    tmp$_1 = $receiver.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      if (!Kotlin.equals(element, NATIVE_ANNOTATION)) {
        destination.add_11rb$(element);
      }
    }
    var annotations = destination;
    if (!this.suppressedDiagnostics_0.isEmpty()) {
      this.out_0.printlnWithIndent_61zpoe$('@file:Suppress(' + joinToString(this.suppressedDiagnostics_0, void 0, void 0, void 0, void 0, void 0, Stringify$visitPackagePart$lambda) + ')');
      if (annotations.isEmpty())
        this.out_0.println();
    }
    if (!annotations.isEmpty()) {
      this.out_0.print_61zpoe$('@file:');
      if (annotations.size === 1) {
        this.printAnnotation_0(first(annotations));
      }
       else {
        this.out_0.print_61zpoe$('[');
        var tmp$_2, tmp$_0_0;
        var index = 0;
        tmp$_2 = annotations.iterator();
        while (tmp$_2.hasNext()) {
          var item = tmp$_2.next();
          if ((tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0) > 0) {
            this.out_0.print_61zpoe$(', ');
          }
          this.printAnnotation_0(item);
        }
        this.out_0.print_61zpoe$(']');
      }
      this.out_0.println();
    }
    var packageNameParts = plus((tmp$_0 = (tmp$ = this.packagePartPrefix_0) != null ? listOf(tmp$) : null) != null ? tmp$_0 : emptyList(), packagePart.fqName);
    if (!packageNameParts.isEmpty()) {
      this.out_0.println_61zpoe$('package ' + joinToString(packageNameParts, '.', void 0, void 0, void 0, void 0, Kotlin.getCallableRef('escapeIfNeed', function ($receiver) {
        return escapeIfNeed($receiver);
      })));
      this.out_0.println();
    }
    if (!this.additionalImports_0.isEmpty()) {
      var tmp$_3;
      tmp$_3 = this.additionalImports_0.iterator();
      while (tmp$_3.hasNext()) {
        var element_0 = tmp$_3.next();
        this.out_0.printlnWithIndent_61zpoe$('import ' + element_0);
      }
      this.out_0.println();
    }
    var tmp$_4 = this.acceptForEach_0;
    var $receiver_0 = packagePart.members;
    var predicate = isNotAnnotatedAsFake;
    var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_5;
    tmp$_5 = $receiver_0.iterator();
    while (tmp$_5.hasNext()) {
      var element_1 = tmp$_5.next();
      if (predicate(element_1)) {
        destination_0.add_11rb$(element_1);
      }
    }
    tmp$_4.call(this, destination_0, this);
  };
  Stringify.prototype.printToOut_sa4ob0$ = function ($receiver, printDefaultValue) {
    if ($receiver.isVar) {
      this.out_0.print_61zpoe$('open var ');
    }
    if ($receiver.type.isVararg) {
      this.out_0.print_61zpoe$(VARARG + ' ');
    }
    this.out_0.print_61zpoe$(get_escapedName($receiver));
    this.printToOut_laliwh$($receiver.type, true);
    if ($receiver.defaultValue != null && printDefaultValue) {
      this.out_0.print_61zpoe$(' = ' + NO_IMPL + ' /* ' + Kotlin.toString($receiver.defaultValue) + ' */');
    }
  };
  Stringify.prototype.visitFunParam_ggmbia$ = function (funParam) {
    this.printToOut_sa4ob0$(funParam, true);
  };
  Stringify.prototype.visitCallSignature_qsdh4m$ = function (signature) {
    this.printToOut_6dmgio$(signature, true, true, true);
  };
  Stringify.prototype.printTypeParams_340l6o$ = function ($receiver, withSpaceAfter) {
    var tmp$;
    (tmp$ = $receiver.typeParams) != null ? this.acceptForEach_0(tmp$, this, ', ', '<', '>' + (withSpaceAfter ? ' ' : '')) : null;
  };
  Stringify.prototype.printToOut_6dmgio$ = function ($receiver, withTypeParams, printUnitReturnType, printDefaultValues) {
    if (withTypeParams) {
      this.printTypeParams_340l6o$($receiver, false);
    }
    this.out_0.print_61zpoe$('(');
    var tmp$, tmp$_0;
    var index = 0;
    tmp$ = $receiver.params.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      if ((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0) > 0)
        this.out_0.print_61zpoe$(', ');
      this.printToOut_sa4ob0$(item, printDefaultValues);
    }
    this.out_0.print_61zpoe$(')');
    this.printToOut_laliwh$($receiver.returnType, printUnitReturnType);
  };
  Stringify.prototype.visitEnumEntry_241v5t$ = function (enumEntry) {
    var tmp$;
    this.out_0.printWithIndent_61zpoe$(get_escapedName(enumEntry));
    if ((tmp$ = enumEntry.value) != null) {
      this.out_0.print_61zpoe$(' /* = ' + tmp$ + ' */');
    }
  };
  Stringify.prototype.visitTypeParam_6v1wg3$ = function (typeParam) {
    var tmp$;
    this.out_0.print_61zpoe$(get_escapedName(typeParam));
    if ((tmp$ = typeParam.upperBound) != null) {
      this.out_0.print_61zpoe$(' : ');
      tmp$.accept_nbqbgi$(this);
    }
  };
  Stringify.prototype.printToOut_laliwh$ = function ($receiver, printUnitType) {
    var isUnit = $receiver.type.isUnit() && !$receiver.isVararg;
    if (!printUnitType && isUnit)
      return;
    this.out_0.print_61zpoe$(': ');
    $receiver.type.accept_nbqbgi$(this);
  };
  Stringify.prototype.visitTypeAnnotation_ryuo7b$ = function (typeAnnotation) {
    this.printToOut_laliwh$(typeAnnotation, true);
  };
  Stringify.prototype.visitType_yasija$ = function (type) {
    var tmp$;
    if (type.isLambda && type.isNullable) {
      this.out_0.print_61zpoe$('(');
    }
    this.out_0.print_61zpoe$(get_escapedName(type));
    this.acceptForEach_0(type.typeArgs, this, ', ', '<', '>');
    if (type.isLambda && type.isNullable) {
      this.out_0.print_61zpoe$(')');
    }
    if (type.isNullable && !Kotlin.equals(type.name, DYNAMIC)) {
      this.out_0.print_61zpoe$('?');
    }
    if ((tmp$ = type.comment) != null) {
      this.out_0.print_61zpoe$(' /* ' + tmp$ + ' */');
    }
  };
  Stringify.prototype.visitTypeUnion_6y0zwl$ = function (typeUnion) {
    this.acceptForEach_0(typeUnion.possibleTypes, this, ' | ');
  };
  Stringify.prototype.visitHeritageType_dup87$ = function (heritageType) {
    this.out_0.print_61zpoe$(get_escapedName(heritageType));
  };
  Stringify.prototype.visitArgument_5qn25p$ = function (argument) {
    var tmp$;
    if ((tmp$ = argument.name) != null) {
      this.out_0.print_61zpoe$(tmp$ + ' = ');
    }
    this.out_0.print_61zpoe$(argument.value.toString());
  };
  Stringify.prototype.innerStringifier_0 = function () {
    return new Stringify(this.packagePartPrefix_0, false, this.additionalImports_0, this.suppressedDiagnostics_0, this.out_0);
  };
  Stringify.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Stringify',
    interfaces: [KtVisitor]
  };
  var MODULE;
  var FAKE;
  var FAKE_ANNOTATION;
  var DEFAULT_FAKE_ANNOTATION;
  function isNotAnnotatedAsFake$lambda(node) {
    var tmp$;
    var result = true;
    tmp$ = node.annotations.iterator();
    while (tmp$.hasNext()) {
      var a = tmp$.next();
      if (Kotlin.equals(a, FAKE_ANNOTATION)) {
        result = false;
        break;
      }
    }
    return result;
  }
  var isNotAnnotatedAsFake;
  function KtNode() {
  }
  KtNode.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'KtNode',
    interfaces: []
  };
  function AbstractKtNode() {
  }
  AbstractKtNode.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitNode_yawk5q$(this);
  };
  AbstractKtNode.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AbstractKtNode',
    interfaces: [KtNode]
  };
  function KtPackagePart(fqName, members, annotations) {
    AbstractKtNode.call(this);
    this.fqName = fqName;
    this.members = members;
    this.annotations_iuu3n5$_0 = annotations;
  }
  Object.defineProperty(KtPackagePart.prototype, 'annotations', {
    get: function () {
      return this.annotations_iuu3n5$_0;
    },
    set: function (annotations) {
      this.annotations_iuu3n5$_0 = annotations;
    }
  });
  KtPackagePart.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitPackagePart_56vfc9$(this);
  };
  KtPackagePart.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtPackagePart',
    interfaces: [KtAnnotated, AbstractKtNode]
  };
  function KtNamed() {
  }
  KtNamed.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'KtNamed',
    interfaces: []
  };
  function KtAnnotated() {
  }
  KtAnnotated.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'KtAnnotated',
    interfaces: []
  };
  function KtMember() {
  }
  KtMember.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'KtMember',
    interfaces: [KtAnnotated, KtNamed, KtNode]
  };
  function KtArgument(value, name) {
    if (name === void 0)
      name = null;
    AbstractKtNode.call(this);
    this.value = value;
    this.name = name;
  }
  KtArgument.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitArgument_5qn25p$(this);
  };
  KtArgument.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtArgument',
    interfaces: [AbstractKtNode]
  };
  KtArgument.prototype.component1 = function () {
    return this.value;
  };
  KtArgument.prototype.component2 = function () {
    return this.name;
  };
  KtArgument.prototype.copy_d2qnki$ = function (value, name) {
    return new KtArgument(value === void 0 ? this.value : value, name === void 0 ? this.name : name);
  };
  KtArgument.prototype.toString = function () {
    return 'KtArgument(value=' + Kotlin.toString(this.value) + (', name=' + Kotlin.toString(this.name)) + ')';
  };
  KtArgument.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    return result;
  };
  KtArgument.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.value, other.value) && Kotlin.equals(this.name, other.name)))));
  };
  function KtAnnotation(name, parameters) {
    if (parameters === void 0) {
      parameters = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    AbstractKtNode.call(this);
    this.name_pqshdx$_0 = name;
    this.parameters = parameters;
  }
  Object.defineProperty(KtAnnotation.prototype, 'name', {
    get: function () {
      return this.name_pqshdx$_0;
    },
    set: function (name) {
      this.name_pqshdx$_0 = name;
    }
  });
  KtAnnotation.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitAnnotation_tw9up$(this);
  };
  KtAnnotation.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtAnnotation',
    interfaces: [AbstractKtNode, KtNamed]
  };
  function KtClassKind(name, ordinal, keyword, bracesAlwaysRequired) {
    if (bracesAlwaysRequired === void 0)
      bracesAlwaysRequired = false;
    Enum.call(this);
    this.keyword = keyword;
    this.bracesAlwaysRequired = bracesAlwaysRequired;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function KtClassKind_initFields() {
    KtClassKind_initFields = function () {
    };
    KtClassKind$CLASS_instance = new KtClassKind('CLASS', 0, 'class');
    KtClassKind$INTERFACE_instance = new KtClassKind('INTERFACE', 1, 'interface');
    KtClassKind$ENUM_instance = new KtClassKind('ENUM', 2, 'enum class');
    KtClassKind$OBJECT_instance = new KtClassKind('OBJECT', 3, 'object', true);
    KtClassKind$COMPANION_OBJECT_instance = new KtClassKind('COMPANION_OBJECT', 4, 'companion object', true);
  }
  var KtClassKind$CLASS_instance;
  function KtClassKind$CLASS_getInstance() {
    KtClassKind_initFields();
    return KtClassKind$CLASS_instance;
  }
  var KtClassKind$INTERFACE_instance;
  function KtClassKind$INTERFACE_getInstance() {
    KtClassKind_initFields();
    return KtClassKind$INTERFACE_instance;
  }
  var KtClassKind$ENUM_instance;
  function KtClassKind$ENUM_getInstance() {
    KtClassKind_initFields();
    return KtClassKind$ENUM_instance;
  }
  var KtClassKind$OBJECT_instance;
  function KtClassKind$OBJECT_getInstance() {
    KtClassKind_initFields();
    return KtClassKind$OBJECT_instance;
  }
  var KtClassKind$COMPANION_OBJECT_instance;
  function KtClassKind$COMPANION_OBJECT_getInstance() {
    KtClassKind_initFields();
    return KtClassKind$COMPANION_OBJECT_instance;
  }
  KtClassKind.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtClassKind',
    interfaces: [Enum]
  };
  function KtClassKind$values() {
    return [KtClassKind$CLASS_getInstance(), KtClassKind$INTERFACE_getInstance(), KtClassKind$ENUM_getInstance(), KtClassKind$OBJECT_getInstance(), KtClassKind$COMPANION_OBJECT_getInstance()];
  }
  KtClassKind.values = KtClassKind$values;
  function KtClassKind$valueOf(name) {
    switch (name) {
      case 'CLASS':
        return KtClassKind$CLASS_getInstance();
      case 'INTERFACE':
        return KtClassKind$INTERFACE_getInstance();
      case 'ENUM':
        return KtClassKind$ENUM_getInstance();
      case 'OBJECT':
        return KtClassKind$OBJECT_getInstance();
      case 'COMPANION_OBJECT':
        return KtClassKind$COMPANION_OBJECT_getInstance();
      default:Kotlin.throwISE('No enum constant ts2kt.kotlin.ast.KtClassKind.' + name);
    }
  }
  KtClassKind.valueOf_61zpoe$ = KtClassKind$valueOf;
  function KtClassifier(kind, name, paramsOfConstructors, typeParams, parents, members, annotations, hasOpenModifier) {
    AbstractKtNode.call(this);
    this.kind = kind;
    this.name_c2z4xj$_0 = name;
    this.paramsOfConstructors = paramsOfConstructors;
    this.typeParams = typeParams;
    this.parents = parents;
    this.members = members;
    this.annotations_c2z4xj$_0 = annotations;
    this.hasOpenModifier = hasOpenModifier;
  }
  Object.defineProperty(KtClassifier.prototype, 'name', {
    get: function () {
      return this.name_c2z4xj$_0;
    },
    set: function (name) {
      this.name_c2z4xj$_0 = name;
    }
  });
  Object.defineProperty(KtClassifier.prototype, 'annotations', {
    get: function () {
      return this.annotations_c2z4xj$_0;
    },
    set: function (annotations) {
      this.annotations_c2z4xj$_0 = annotations;
    }
  });
  KtClassifier.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitClassifier_k8ctg1$(this);
  };
  KtClassifier.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtClassifier',
    interfaces: [AbstractKtNode, KtMember]
  };
  function KtFunParam(name, type, defaultValue, isVar) {
    if (defaultValue === void 0)
      defaultValue = null;
    if (isVar === void 0)
      isVar = false;
    AbstractKtNode.call(this);
    this.name_d3fiv8$_0 = name;
    this.type = type;
    this.defaultValue = defaultValue;
    this.isVar = isVar;
  }
  Object.defineProperty(KtFunParam.prototype, 'name', {
    get: function () {
      return this.name_d3fiv8$_0;
    },
    set: function (name) {
      this.name_d3fiv8$_0 = name;
    }
  });
  KtFunParam.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitFunParam_ggmbia$(this);
  };
  KtFunParam.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtFunParam',
    interfaces: [AbstractKtNode, KtNamed]
  };
  function KtCallSignature(params, typeParams, returnType) {
    AbstractKtNode.call(this);
    this.params = params;
    this.typeParams = typeParams;
    this.returnType = returnType;
  }
  KtCallSignature.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitCallSignature_qsdh4m$(this);
  };
  KtCallSignature.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtCallSignature',
    interfaces: [AbstractKtNode]
  };
  function KtFunction(name, callSignature, extendsType, annotations, needsNoImpl, isOverride, hasOpenModifier, isOperator) {
    if (extendsType === void 0)
      extendsType = null;
    if (needsNoImpl === void 0)
      needsNoImpl = true;
    if (isOverride === void 0)
      isOverride = false;
    AbstractKtNode.call(this);
    this.name_3ta2ku$_0 = name;
    this.callSignature = callSignature;
    this.extendsType = extendsType;
    this.annotations_3ta2ku$_0 = annotations;
    this.needsNoImpl = needsNoImpl;
    this.isOverride = isOverride;
    this.hasOpenModifier = hasOpenModifier;
    this.isOperator = isOperator;
  }
  Object.defineProperty(KtFunction.prototype, 'name', {
    get: function () {
      return this.name_3ta2ku$_0;
    },
    set: function (name) {
      this.name_3ta2ku$_0 = name;
    }
  });
  Object.defineProperty(KtFunction.prototype, 'annotations', {
    get: function () {
      return this.annotations_3ta2ku$_0;
    },
    set: function (annotations) {
      this.annotations_3ta2ku$_0 = annotations;
    }
  });
  KtFunction.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitFunction_g5u9tk$(this);
  };
  KtFunction.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtFunction',
    interfaces: [AbstractKtNode, KtMember]
  };
  function KtVariable(name, type, extendsType, annotations, typeParams, isVar, needsNoImpl, isInInterface, isOverride, hasOpenModifier) {
    if (extendsType === void 0)
      extendsType = null;
    if (needsNoImpl === void 0)
      needsNoImpl = true;
    if (isOverride === void 0)
      isOverride = false;
    AbstractKtNode.call(this);
    this.name_2uow4y$_0 = name;
    this.type = type;
    this.extendsType = extendsType;
    this.annotations_2uow4y$_0 = annotations;
    this.typeParams = typeParams;
    this.isVar = isVar;
    this.needsNoImpl = needsNoImpl;
    this.isInInterface = isInInterface;
    this.isOverride = isOverride;
    this.hasOpenModifier = hasOpenModifier;
  }
  Object.defineProperty(KtVariable.prototype, 'name', {
    get: function () {
      return this.name_2uow4y$_0;
    },
    set: function (name) {
      this.name_2uow4y$_0 = name;
    }
  });
  Object.defineProperty(KtVariable.prototype, 'annotations', {
    get: function () {
      return this.annotations_2uow4y$_0;
    },
    set: function (annotations) {
      this.annotations_2uow4y$_0 = annotations;
    }
  });
  KtVariable.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitVariable_bd4hv0$(this);
  };
  KtVariable.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtVariable',
    interfaces: [AbstractKtNode, KtMember]
  };
  function KtEnumEntry(name, value) {
    if (value === void 0)
      value = null;
    AbstractKtNode.call(this);
    this.name_5ji7xj$_0 = name;
    this.value = value;
    this.annotations_5ji7xj$_0 = Kotlin.kotlin.collections.emptyList_287e2$();
  }
  Object.defineProperty(KtEnumEntry.prototype, 'name', {
    get: function () {
      return this.name_5ji7xj$_0;
    },
    set: function (name) {
      this.name_5ji7xj$_0 = name;
    }
  });
  Object.defineProperty(KtEnumEntry.prototype, 'annotations', {
    get: function () {
      return this.annotations_5ji7xj$_0;
    },
    set: function (annotations) {
      this.annotations_5ji7xj$_0 = annotations;
    }
  });
  KtEnumEntry.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitEnumEntry_241v5t$(this);
  };
  KtEnumEntry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtEnumEntry',
    interfaces: [AbstractKtNode, KtMember]
  };
  function KtHeritageType(name) {
    AbstractKtNode.call(this);
    this.name_bxfq0f$_0 = name;
  }
  Object.defineProperty(KtHeritageType.prototype, 'name', {
    get: function () {
      return this.name_bxfq0f$_0;
    },
    set: function (name) {
      this.name_bxfq0f$_0 = name;
    }
  });
  KtHeritageType.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitHeritageType_dup87$(this);
  };
  KtHeritageType.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !Kotlin.isType(other, KtHeritageType))
      return false;
    if (!Kotlin.equals(this.name, other.name))
      return false;
    return true;
  };
  KtHeritageType.prototype.hashCode = function () {
    return Kotlin.hashCode(this.name);
  };
  KtHeritageType.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtHeritageType',
    interfaces: [AbstractKtNode, KtNamed]
  };
  function KtTypeUnion(possibleTypes) {
    return new KtTypeUnion_0(toList(possibleTypes));
  }
  function KtTypeUnion_0(possibleTypes) {
    AbstractKtNode.call(this);
    this.possibleTypes = possibleTypes;
    var tmp$;
    if (this.possibleTypes.size === 1)
      tmp$ = single(this.possibleTypes);
    else {
      tmp$ = new KtType(DYNAMIC, void 0, stringify(this), first(this.possibleTypes).isNullable);
    }
    this.singleType = tmp$;
  }
  KtTypeUnion_0.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitTypeUnion_6y0zwl$(this);
  };
  KtTypeUnion_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtTypeUnion',
    interfaces: [AbstractKtNode]
  };
  KtTypeUnion_0.prototype.component1 = function () {
    return this.possibleTypes;
  };
  KtTypeUnion_0.prototype.copy_uevjwn$ = function (possibleTypes) {
    return new KtTypeUnion_0(possibleTypes === void 0 ? this.possibleTypes : possibleTypes);
  };
  KtTypeUnion_0.prototype.toString = function () {
    return 'KtTypeUnion(possibleTypes=' + Kotlin.toString(this.possibleTypes) + ')';
  };
  KtTypeUnion_0.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.possibleTypes) | 0;
    return result;
  };
  KtTypeUnion_0.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.possibleTypes, other.possibleTypes))));
  };
  function KtType(name, typeArgs, comment, isNullable, isLambda) {
    if (typeArgs === void 0)
      typeArgs = emptyList();
    if (comment === void 0)
      comment = null;
    if (isNullable === void 0)
      isNullable = false;
    if (isLambda === void 0)
      isLambda = false;
    AbstractKtNode.call(this);
    this.name_264v2o$_0 = name;
    this.typeArgs = typeArgs;
    this.comment = comment;
    this.isNullable = isNullable;
    this.isLambda = isLambda;
  }
  Object.defineProperty(KtType.prototype, 'name', {
    get: function () {
      return this.name_264v2o$_0;
    },
    set: function (name) {
      this.name_264v2o$_0 = name;
    }
  });
  KtType.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitType_yasija$(this);
  };
  KtType.prototype.isUnit = function () {
    return Kotlin.equals(get_escapedName(this), UNIT) && !this.isNullable && !this.isLambda;
  };
  KtType.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtType',
    interfaces: [AbstractKtNode, KtNamed]
  };
  KtType.prototype.component1 = function () {
    return this.name;
  };
  KtType.prototype.component2 = function () {
    return this.typeArgs;
  };
  KtType.prototype.component3 = function () {
    return this.comment;
  };
  KtType.prototype.component4 = function () {
    return this.isNullable;
  };
  KtType.prototype.component5 = function () {
    return this.isLambda;
  };
  KtType.prototype.copy_v60rl8$ = function (name, typeArgs, comment, isNullable, isLambda) {
    return new KtType(name === void 0 ? this.name : name, typeArgs === void 0 ? this.typeArgs : typeArgs, comment === void 0 ? this.comment : comment, isNullable === void 0 ? this.isNullable : isNullable, isLambda === void 0 ? this.isLambda : isLambda);
  };
  KtType.prototype.toString = function () {
    return 'KtType(name=' + Kotlin.toString(this.name) + (', typeArgs=' + Kotlin.toString(this.typeArgs)) + (', comment=' + Kotlin.toString(this.comment)) + (', isNullable=' + Kotlin.toString(this.isNullable)) + (', isLambda=' + Kotlin.toString(this.isLambda)) + ')';
  };
  KtType.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeArgs) | 0;
    result = result * 31 + Kotlin.hashCode(this.comment) | 0;
    result = result * 31 + Kotlin.hashCode(this.isNullable) | 0;
    result = result * 31 + Kotlin.hashCode(this.isLambda) | 0;
    return result;
  };
  KtType.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.typeArgs, other.typeArgs) && Kotlin.equals(this.comment, other.comment) && Kotlin.equals(this.isNullable, other.isNullable) && Kotlin.equals(this.isLambda, other.isLambda)))));
  };
  function KtTypeParam(name, upperBound) {
    if (upperBound === void 0)
      upperBound = null;
    AbstractKtNode.call(this);
    this.name_cp815$_0 = name;
    this.upperBound = upperBound;
  }
  Object.defineProperty(KtTypeParam.prototype, 'name', {
    get: function () {
      return this.name_cp815$_0;
    },
    set: function (name) {
      this.name_cp815$_0 = name;
    }
  });
  KtTypeParam.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitTypeParam_6v1wg3$(this);
  };
  KtTypeParam.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !Kotlin.isType(other, KtTypeParam))
      return false;
    if (!Kotlin.equals(this.name, other.name))
      return false;
    if (!Kotlin.equals(this.upperBound, other.upperBound))
      return false;
    return true;
  };
  KtTypeParam.prototype.hashCode = function () {
    var tmp$, tmp$_0;
    var result = Kotlin.hashCode(this.name);
    result = (31 * result | 0) + ((tmp$_0 = (tmp$ = this.upperBound) != null ? tmp$.hashCode() : null) != null ? tmp$_0 : 0) | 0;
    return result;
  };
  KtTypeParam.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtTypeParam',
    interfaces: [AbstractKtNode, KtNamed]
  };
  function KtTypeAlias(name, typeParams, actualTypeUnionUsingAliasParams) {
    if (typeParams === void 0)
      typeParams = null;
    this.name = name;
    this.typeParams = typeParams;
    this.actualTypeUnionUsingAliasParams = actualTypeUnionUsingAliasParams;
  }
  KtTypeAlias.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtTypeAlias',
    interfaces: []
  };
  KtTypeAlias.prototype.component1 = function () {
    return this.name;
  };
  KtTypeAlias.prototype.component2 = function () {
    return this.typeParams;
  };
  KtTypeAlias.prototype.component3 = function () {
    return this.actualTypeUnionUsingAliasParams;
  };
  KtTypeAlias.prototype.copy_ttyrrc$ = function (name, typeParams, actualTypeUnionUsingAliasParams) {
    return new KtTypeAlias(name === void 0 ? this.name : name, typeParams === void 0 ? this.typeParams : typeParams, actualTypeUnionUsingAliasParams === void 0 ? this.actualTypeUnionUsingAliasParams : actualTypeUnionUsingAliasParams);
  };
  KtTypeAlias.prototype.toString = function () {
    return 'KtTypeAlias(name=' + Kotlin.toString(this.name) + (', typeParams=' + Kotlin.toString(this.typeParams)) + (', actualTypeUnionUsingAliasParams=' + Kotlin.toString(this.actualTypeUnionUsingAliasParams)) + ')';
  };
  KtTypeAlias.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeParams) | 0;
    result = result * 31 + Kotlin.hashCode(this.actualTypeUnionUsingAliasParams) | 0;
    return result;
  };
  KtTypeAlias.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.typeParams, other.typeParams) && Kotlin.equals(this.actualTypeUnionUsingAliasParams, other.actualTypeUnionUsingAliasParams)))));
  };
  function KtTypeAlias_0(name, typeParams, actualTypeUsingAliasParams) {
    if (typeParams === void 0)
      typeParams = null;
    return new KtTypeAlias(name, typeParams, KtTypeUnion([actualTypeUsingAliasParams]));
  }
  function KtTypeAnnotation(type, isVararg) {
    if (isVararg === void 0)
      isVararg = false;
    AbstractKtNode.call(this);
    this.type = type;
    this.isVararg = isVararg;
  }
  KtTypeAnnotation.prototype.accept_nbqbgi$ = function (visitor) {
    visitor.visitTypeAnnotation_ryuo7b$(this);
  };
  KtTypeAnnotation.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KtTypeAnnotation',
    interfaces: [AbstractKtNode]
  };
  function stringify($receiver) {
    return stringify_0($receiver, null, false);
  }
  function stringify_0($receiver, packagePartPrefix, topLevel, additionalImports, suppressedDiagnostics) {
    if (topLevel === void 0)
      topLevel = true;
    if (additionalImports === void 0) {
      additionalImports = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    if (suppressedDiagnostics === void 0) {
      suppressedDiagnostics = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    var $receiver_0 = new Stringify(packagePartPrefix, topLevel, additionalImports, suppressedDiagnostics);
    $receiver.accept_nbqbgi$($receiver_0);
    return $receiver_0.result;
  }
  function getFirstParamAsString($receiver) {
    var tmp$;
    if ($receiver.parameters.isEmpty())
      return null;
    var annotationParam = typeof (tmp$ = $receiver.parameters.get_za3lpa$(0).value) === 'string' ? tmp$ : Kotlin.throwCCE();
    var endIndex = annotationParam.length - 1 | 0;
    return annotationParam.substring(1, endIndex);
  }
  function isModule($receiver) {
    return $receiver.kind === KtClassKind$OBJECT_getInstance() && hasModuleAnnotation($receiver);
  }
  function hasModuleAnnotation($receiver) {
    var $receiver_0 = $receiver.annotations;
    var any$result;
    any$break: do {
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (Kotlin.equals(element.name, MODULE)) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    return any$result;
  }
  function getClassObject($receiver) {
    var tmp$;
    var $receiver_0 = $receiver.members;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$_0;
      tmp$_0 = $receiver_0.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (Kotlin.isType(element, KtClassifier) && element.kind === KtClassKind$COMPANION_OBJECT_getInstance()) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }
      }
      firstOrNull$result = null;
    }
     while (false);
    return Kotlin.isType(tmp$ = firstOrNull$result, KtClassifier) ? tmp$ : null;
  }
  function get_escapedName($receiver) {
    return escapeIfNeed($receiver.name);
  }
  function createFunctionType$lambda(it) {
    var tmp$, tmp$_0;
    return it.name + stringify(it.type) + Kotlin.toString((tmp$_0 = (tmp$ = it.defaultValue) != null ? ' /*= ' + tmp$ + '*/' : null) != null ? tmp$_0 : '');
  }
  function createFunctionType(parameters, returnType, isNullable) {
    if (isNullable === void 0)
      isNullable = false;
    var params = join(parameters, ', ', void 0, void 0, void 0, void 0, void 0, createFunctionType$lambda);
    var typeAsString = '(' + params + ') -> ' + stringify(returnType);
    return new KtType(typeAsString, void 0, void 0, isNullable, true);
  }
  function Visitor() {
  }
  Visitor.prototype.visitModuleDeclaration_ezg4eu$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitFunctionDeclaration_eywj3y$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitTypeAliasDeclaration_it7xrc$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitVariableStatement_x0poxd$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitEnumDeclaration_1emvp1$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitClassDeclaration_4wvyue$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitInterfaceDeclaration_f4u3$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitHeritageClause_10qtta$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitConstructorDeclaration_cz84f8$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitConstructSignatureDeclaration_cz84f8$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitMethodDeclaration_7vsj57$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitPropertyDeclaration_qnxew1$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitIndexSignature_53if9s$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitSignatureDeclaration_vb212e$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.prototype.visitExportAssignment_fybyfv$ = function (node) {
    throw new Kotlin.kotlin.NotImplementedError();
  };
  Visitor.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Visitor',
    interfaces: []
  };
  var ANY;
  var NOTHING;
  var NUMBER;
  var STRING;
  var BOOLEAN;
  var UNIT;
  var DYNAMIC;
  var ARRAY;
  var NOTHING_TYPE;
  var SHOULD_BE_ESCAPED;
  function NOT_OVERRIDE$lambda(it) {
    return false;
  }
  var NOT_OVERRIDE;
  var OVERLOAD_GEN_THRESHOLD_FOR_TYPE_COUNT_ON_ONE_PARAMETER;
  var OVERLOAD_GEN_THRESHOLD_FOR_TOTAL_COUNT;
  function escapeIfNeed($receiver) {
    var tmp$;
    if (SHOULD_BE_ESCAPED.contains_11rb$($receiver) || contains($receiver, '$')) {
      tmp$ = '`' + $receiver + '`';
    }
     else {
      tmp$ = $receiver;
    }
    return tmp$;
  }
  function get_isVararg($receiver) {
    return $receiver.dotDotDotToken != null;
  }
  function toKotlinParam($receiver, typeMapper) {
    var tmp$;
    var nodeType = getNodeTypeConsideringVararg($receiver);
    return toKotlinParam_0($receiver, nodeType, (tmp$ = nodeType != null ? toKotlinType_2(nodeType, typeMapper) : null) != null ? tmp$ : new KtType(ANY));
  }
  function toKotlinParamOverloads($receiver, typeMapper) {
    var tmp$;
    var nodeType = getNodeTypeConsideringVararg($receiver);
    var unionType = (tmp$ = nodeType != null ? toKotlinTypeUnion_0(nodeType, typeMapper) : null) != null ? tmp$ : KtTypeUnion([new KtType(ANY)]);
    if (unionType.possibleTypes.size > OVERLOAD_GEN_THRESHOLD_FOR_TYPE_COUNT_ON_ONE_PARAMETER) {
      return listOf(toKotlinParam_1($receiver, new KtType(DYNAMIC, void 0, stringify(unionType))));
    }
    var $receiver_0 = unionType.possibleTypes;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver_0, 10));
    var tmp$_0;
    tmp$_0 = $receiver_0.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination.add_11rb$(toKotlinParam_0($receiver, nodeType, item));
    }
    return destination;
  }
  function toKotlinParam_0($receiver, nodeType, typeWithoutFlags) {
    var isNullable = $receiver.questionToken != null || typeWithoutFlags.isNullable;
    var isLambda = (nodeType != null ? nodeType.kind : null) === SyntaxKind$FunctionType;
    return toKotlinParam_1($receiver, typeWithoutFlags.copy_v60rl8$(void 0, void 0, void 0, isNullable, isLambda));
  }
  function toKotlinParam_1($receiver, type) {
    var tmp$, tmp$_0;
    var name = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$ = $receiver.name) != null ? tmp$ : Kotlin.throwNPE()).text);
    var tmp$_1;
    if ((tmp$_0 = $receiver.initializer) != null) {
      var block$result;
      var tmp$_2;
      tmp$_2 = tmp$_0.kind;
      if (Kotlin.equals(tmp$_2, SyntaxKind$FirstLiteralToken)) {
        block$result = tmp$_0.text;
      }
       else if (Kotlin.equals(tmp$_2, SyntaxKind$StringLiteral)) {
        block$result = '"' + tmp$_0.text + '"';
      }
       else {
        block$result = reportUnsupportedNode(tmp$_0);
      }
      tmp$_1 = block$result;
    }
     else
      tmp$_1 = null;
    var defaultValue = tmp$_1;
    var isVar = ($receiver.flags & NodeFlags$AccessibilityModifier) !== 0;
    var isOptional = $receiver.questionToken != null;
    return new KtFunParam(name, new KtTypeAnnotation(type, get_isVararg($receiver)), defaultValue == null && isOptional ? 'null' : defaultValue, isVar);
  }
  function getNodeTypeConsideringVararg($receiver) {
    var tmp$;
    var originalNodeType = $receiver.type;
    var nodeType;
    if (get_isVararg($receiver) && originalNodeType != null) {
      var originalNodeKind = originalNodeType.kind;
      if (originalNodeKind === SyntaxKind$ArrayType) {
        nodeType = originalNodeType.elementType;
      }
       else {
        var tmp$_0, tmp$_1;
        if (originalNodeKind === SyntaxKind$TypeReference && Kotlin.equals((Kotlin.isType(tmp$_1 = (Kotlin.isType(tmp$_0 = originalNodeType, Object) ? tmp$_0 : Kotlin.throwCCE()).typeName, Object) ? tmp$_1 : Kotlin.throwCCE()).text, 'Array')) {
          var typeArguments = (tmp$ = originalNodeType.typeArguments) != null ? tmp$ : Kotlin.throwNPE();
          assert(typeArguments.length === 1, 'Array should have one generic paramater, but have ' + typeArguments.length + '.');
          nodeType = typeArguments[0];
        }
         else {
          report('Rest parameter must be array types, but ' + Kotlin.kotlin.js.get_js_1yb8b7$(Kotlin.getKClass(_.$$importsForInline$$.typescript.SyntaxKind))[originalNodeKind]);
          return null;
        }
      }
    }
     else {
      nodeType = originalNodeType;
    }
    return nodeType;
  }
  function toKotlinParamsOverloads($receiver, typeMapper) {
    return toKotlinParamsOverloads_0($receiver, typeMapper, $receiver.length - 1 | 0);
  }
  function toKotlinParamsOverloads_0($receiver, typeMapper, arrIndex) {
    if (arrIndex < 0) {
      return listOf(emptyList());
    }
     else {
      var overloadsOfPriorParams = toKotlinParamsOverloads_0($receiver, typeMapper, arrIndex - 1 | 0);
      var parameterDeclaration = $receiver[arrIndex];
      var paramOverloads = {v: toKotlinParamOverloads(parameterDeclaration, typeMapper)};
      if (Kotlin.imul(overloadsOfPriorParams.size, paramOverloads.v.size) > OVERLOAD_GEN_THRESHOLD_FOR_TOTAL_COUNT) {
        var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$(paramOverloads.v, 10));
        var tmp$;
        tmp$ = paramOverloads.v.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(item.type.type);
        }
        var comment = stringify(new KtTypeUnion_0(destination));
        paramOverloads.v = listOf(toKotlinParam_1(parameterDeclaration, new KtType(DYNAMIC, void 0, comment)));
      }
      var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var tmp$_0;
      tmp$_0 = overloadsOfPriorParams.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        var destination_1 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$(paramOverloads.v, 10));
        var tmp$_1;
        tmp$_1 = paramOverloads.v.iterator();
        while (tmp$_1.hasNext()) {
          var item_0 = tmp$_1.next();
          destination_1.add_11rb$(plus_0(element, item_0));
        }
        var list = destination_1;
        Kotlin.kotlin.collections.addAll_ipc267$(destination_0, list);
      }
      return destination_0;
    }
  }
  function toKotlinParams($receiver, typeMapper) {
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(toKotlinParam(item, typeMapper));
    }
    return destination;
  }
  function toKotlinTypeParams($receiver, typeMapper) {
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(toKotlinTypeParam(item, typeMapper));
    }
    return destination;
  }
  function toKotlinTypeParam($receiver, typeMapper) {
    var tmp$;
    var type = toKotlinType_2($receiver.name, typeMapper);
    var upperBound = (tmp$ = $receiver.constraint) != null ? toKotlinType_2(tmp$, typeMapper) : null;
    return new KtTypeParam(type.name, upperBound);
  }
  function toKotlinCallSignatureOverloads($receiver, typeMapper) {
    var newTypeMapper = typeMapper.withTypeParameters_le0eav$($receiver.typeParameters);
    var paramsOverloads = toKotlinParamsOverloads($receiver.parameters, newTypeMapper);
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$(paramsOverloads, 10));
    var tmp$;
    tmp$ = paramsOverloads.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(toKotlinCallSignature_0($receiver, newTypeMapper, item));
    }
    return destination;
  }
  function toKotlinCallSignature($receiver, typeMapper) {
    var newTypeMapper = typeMapper.withTypeParameters_le0eav$($receiver.typeParameters);
    var params = toKotlinParams($receiver.parameters, newTypeMapper);
    return toKotlinCallSignature_0($receiver, newTypeMapper, params);
  }
  function toKotlinCallSignature_0($receiver, typeMapper, params) {
    var tmp$, tmp$_0, tmp$_1;
    var typeParams = (tmp$ = $receiver.typeParameters) != null ? toKotlinTypeParams(tmp$, typeMapper) : null;
    var returnType = (tmp$_1 = (tmp$_0 = $receiver.type) != null ? toKotlinType_2(tmp$_0, typeMapper) : null) != null ? tmp$_1 : new KtType(UNIT);
    return new KtCallSignature(params, typeParams, new KtTypeAnnotation(returnType));
  }
  function toKotlinType($receiver, typeMapper) {
    var typeArg = toKotlinType_2($receiver.elementType, typeMapper);
    return new KtType(ARRAY, listOf(typeArg));
  }
  function toKotlinType_0($receiver, typeMapper) {
    var tmp$, tmp$_0;
    var params = toKotlinParams($receiver.parameters, typeMapper);
    var returnType = (tmp$_0 = (tmp$ = $receiver.type) != null ? toKotlinType_2(tmp$, typeMapper) : null) != null ? tmp$_0 : new KtType(ANY);
    return createFunctionType(params, returnType);
  }
  function toKotlinTypeUnion($receiver, typeMapper) {
    var $receiver_0 = toKotlinParamsOverloads($receiver.parameters, typeMapper);
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0, tmp$_1;
      destination.add_11rb$(createFunctionType(item, (tmp$_1 = (tmp$_0 = $receiver.type) != null ? toKotlinType_2(tmp$_0, typeMapper) : null) != null ? tmp$_1 : new KtType(ANY)));
    }
    return new KtTypeUnion_0(destination);
  }
  function toKotlinType_1($receiver, typeMapper) {
    return typeMapper.getKotlinTypeForObjectType_29gnwt$($receiver);
  }
  function toKotlinTypeUnion_0($receiver, typeMapper) {
    var tmp$, tmp$_0;
    tmp$ = $receiver.kind;
    if (Kotlin.equals(tmp$, SyntaxKind$ConstructorType) || Kotlin.equals(tmp$, SyntaxKind$FunctionType)) {
      tmp$_0 = toKotlinTypeUnion($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$TypeReference)) {
      tmp$_0 = toKotlinTypeUnion_1($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$UnionType)) {
      tmp$_0 = toKotlinTypeUnion_2($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$IntersectionType)) {
      tmp$_0 = toKotlinTypeUnion_3($receiver, typeMapper);
    }
     else
      tmp$_0 = KtTypeUnion([toKotlinType_2($receiver, typeMapper)]);
    return tmp$_0;
  }
  function toKotlinType_2($receiver, typeMapper) {
    var tmp$, tmp$_0;
    tmp$ = $receiver.kind;
    if (Kotlin.equals(tmp$, SyntaxKind$AnyKeyword))
      tmp$_0 = new KtType(ANY);
    else if (Kotlin.equals(tmp$, SyntaxKind$NumberKeyword))
      tmp$_0 = new KtType(NUMBER);
    else if (Kotlin.equals(tmp$, SyntaxKind$StringKeyword))
      tmp$_0 = new KtType(STRING);
    else if (Kotlin.equals(tmp$, SyntaxKind$BooleanKeyword))
      tmp$_0 = new KtType(BOOLEAN);
    else if (Kotlin.equals(tmp$, SyntaxKind$VoidKeyword))
      tmp$_0 = new KtType(UNIT);
    else if (Kotlin.equals(tmp$, SyntaxKind$NullKeyword) || Kotlin.equals(tmp$, SyntaxKind$UndefinedKeyword))
      tmp$_0 = NOTHING_TYPE;
    else if (Kotlin.equals(tmp$, SyntaxKind$ArrayType)) {
      tmp$_0 = toKotlinType($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$ConstructorType) || Kotlin.equals(tmp$, SyntaxKind$FunctionType)) {
      tmp$_0 = toKotlinType_0($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$TypeReference)) {
      tmp$_0 = toKotlinTypeUnion_1($receiver, typeMapper).singleType;
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$ExpressionWithTypeArguments)) {
      tmp$_0 = toKotlinType_3($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$Identifier)) {
      tmp$_0 = new KtType(_.$$importsForInline$$.typescript.unescapeIdentifier($receiver.text));
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$TypeLiteral)) {
      tmp$_0 = toKotlinType_1($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$UnionType)) {
      tmp$_0 = toKotlinTypeUnion_2($receiver, typeMapper).singleType;
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$IntersectionType)) {
      tmp$_0 = toKotlinTypeUnion_3($receiver, typeMapper).singleType;
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$ParenthesizedType)) {
      tmp$_0 = toKotlinType_2($receiver.type, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$LiteralType)) {
      tmp$_0 = new KtType(ANY, void 0, '"' + Kotlin.toString($receiver.literal.text) + '"');
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$ThisType)) {
      tmp$_0 = toKotlinType_4($receiver, typeMapper);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$TypePredicate)) {
      tmp$_0 = toKotlinType_5($receiver, typeMapper);
    }
     else
      tmp$_0 = new KtType(DYNAMIC, void 0, reportUnsupportedNodeAndGetMessage($receiver));
    return tmp$_0;
  }
  function toKotlinTypeName($receiver, typeMapper) {
    var tmp$;
    if (Kotlin.equals($receiver.kind, SyntaxKind$Identifier)) {
      tmp$ = _.$$importsForInline$$.typescript.unescapeIdentifier($receiver.text);
    }
     else {
      tmp$ = toKotlinTypeName($receiver.left, typeMapper) + '.' + _.$$importsForInline$$.typescript.unescapeIdentifier($receiver.right.text);
    }
    return tmp$;
  }
  function toKotlinTypeUnion_1($receiver, typeMapper) {
    return typeMapper.resolveUsingAliases_yasija$(toKotlinTypeIgnoringTypeAliases($receiver, typeMapper));
  }
  function toKotlinTypeIgnoringTypeAliases($receiver, typeMapper) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var name = toKotlinTypeName(Kotlin.isType(tmp$ = $receiver.typeName, Object) ? tmp$ : Kotlin.throwCCE(), typeMapper);
    if (Kotlin.equals(name, 'Function'))
      tmp$_3 = new KtType(name, listOf(new KtType('*')));
    else if (Kotlin.equals(name, 'Object'))
      tmp$_3 = new KtType(ANY);
    else {
      var tmp$_4;
      if ((tmp$_1 = (tmp$_0 = $receiver.typeArguments) != null ? tmp$_0 : null) != null) {
        var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(tmp$_1.length);
        var tmp$_5;
        for (tmp$_5 = 0; tmp$_5 !== tmp$_1.length; ++tmp$_5) {
          var item = tmp$_1[tmp$_5];
          destination.add_11rb$(toKotlinType_2(item, typeMapper));
        }
        tmp$_4 = destination;
      }
       else
        tmp$_4 = null;
      tmp$_3 = new KtType(name, (tmp$_2 = tmp$_4) != null ? tmp$_2 : emptyList());
    }
    return tmp$_3;
  }
  function toKotlinType_3($receiver, typeMapper) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var name = stringifyQualifiedName($receiver.expression);
    tmp$ = name != null ? name : '???';
    var tmp$_3;
    if ((tmp$_1 = (tmp$_0 = $receiver.typeArguments) != null ? tmp$_0 : null) != null) {
      var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(tmp$_1.length);
      var tmp$_4;
      for (tmp$_4 = 0; tmp$_4 !== tmp$_1.length; ++tmp$_4) {
        var item = tmp$_1[tmp$_4];
        destination.add_11rb$(toKotlinType_2(item, typeMapper));
      }
      tmp$_3 = destination;
    }
     else
      tmp$_3 = null;
    return new KtType(tmp$, (tmp$_2 = tmp$_3) != null ? tmp$_2 : emptyList());
  }
  function stringify_1($receiver) {
    var tmp$, tmp$_0;
    var identifier = _.$$importsForInline$$.typescript.unescapeIdentifier($receiver.name.text);
    tmp$_0 = (tmp$ = $receiver.expression) != null ? stringifyQualifiedName(tmp$) : null;
    if (tmp$_0 == null) {
      return identifier;
    }
    var qualifier = tmp$_0;
    return qualifier + '.' + identifier;
  }
  function stringifyQualifiedName($receiver) {
    var tmp$;
    tmp$ = $receiver.kind;
    if (Kotlin.equals(tmp$, SyntaxKind$Identifier)) {
      return _.$$importsForInline$$.typescript.unescapeIdentifier($receiver.text);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$PropertyAccessExpression)) {
      return stringify_1($receiver);
    }
     else
      return reportUnsupportedNode($receiver);
  }
  function toKotlinTypeUnion_2($receiver, typeMapper) {
    var $receiver_0 = $receiver.types;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver_0.length; ++tmp$) {
      var element = $receiver_0[tmp$];
      var list = toKotlinTypeUnion_0(element, typeMapper).possibleTypes;
      Kotlin.kotlin.collections.addAll_ipc267$(destination, list);
    }
    var possibleTypes = distinct(destination);
    if (possibleTypes.size === 2) {
      var a = possibleTypes.get_za3lpa$(0);
      var b = possibleTypes.get_za3lpa$(1);
      var t = (a != null ? a.equals(NOTHING_TYPE) : null) ? b : (b != null ? b.equals(NOTHING_TYPE) : null) ? a : null;
      if (t != null) {
        return new KtTypeUnion_0(listOf(t.copy_v60rl8$(void 0, void 0, void 0, true)));
      }
    }
    return new KtTypeUnion_0(possibleTypes);
  }
  function toKotlinTypeUnion$lambda(closure$commentWithExpectedType) {
    return function (it) {
      return it.copy_v60rl8$(void 0, void 0, closure$commentWithExpectedType);
    };
  }
  function toKotlinTypeUnion_3($receiver, typeMapper) {
    var $receiver_0 = $receiver.types;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$($receiver_0.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver_0.length; ++tmp$) {
      var item = $receiver_0[tmp$];
      destination.add_11rb$(toKotlinTypeUnion_0(item, typeMapper));
    }
    var kotlinTypeUnions = destination;
    var commentWithExpectedType = join(kotlinTypeUnions, ' & ', void 0, void 0, void 0, void 0, void 0, Kotlin.getCallableRef('stringify', function ($receiver) {
      return stringify($receiver);
    }));
    return mapLast(kotlinTypeUnions.get_za3lpa$(0), toKotlinTypeUnion$lambda(commentWithExpectedType));
  }
  function mapLast($receiver, function_0) {
    return new KtTypeUnion_0(plus_0(dropLast($receiver.possibleTypes, 1), function_0(last($receiver.possibleTypes))));
  }
  function toKotlinType_4($receiver, typeMapper) {
    var tmp$;
    var parent = $receiver.parent;
    while (parent != null) {
      tmp$ = parent.kind;
      if (Kotlin.equals(tmp$, SyntaxKind$ClassDeclaration) || Kotlin.equals(tmp$, SyntaxKind$InterfaceDeclaration)) {
        return toKotlinType_6(parent, typeMapper).copy_v60rl8$(void 0, void 0, 'this');
      }
       else if (Kotlin.equals(tmp$, SyntaxKind$TypeLiteral))
        return new KtType(ANY, void 0, 'this');
      parent = parent.parent;
    }
    return new KtType(DYNAMIC, void 0, report('ThisTypeNode.toKotlinType in illegal state'));
  }
  function toKotlinType_5($receiver, typeMapper) {
    return new KtType(BOOLEAN);
  }
  function toKotlinType_6($receiver, typeMapper) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var name = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$ = $receiver.name) != null ? tmp$ : Kotlin.throwNPE()).text);
    var tmp$_3;
    if ((tmp$_1 = (tmp$_0 = $receiver.typeParameters) != null ? tmp$_0 : null) != null) {
      var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(tmp$_1.length);
      var tmp$_4;
      for (tmp$_4 = 0; tmp$_4 !== tmp$_1.length; ++tmp$_4) {
        var item = tmp$_1[tmp$_4];
        destination.add_11rb$(new KtType(_.$$importsForInline$$.typescript.unescapeIdentifier(item.name.text)));
      }
      tmp$_3 = destination;
    }
     else
      tmp$_3 = null;
    return new KtType(name, (tmp$_2 = tmp$_3) != null ? tmp$_2 : emptyList());
  }
  function forEachChild$lambda(closure$visitor) {
    return function (node) {
      visitNode(closure$visitor, node);
    };
  }
  function forEachChild_0(visitor, node) {
    forEachChild(node, forEachChild$lambda(visitor));
  }
  function visitNode(visitor, node) {
    var tmp$;
    if (node == null)
      return;
    tmp$ = node.kind;
    if (Kotlin.equals(tmp$, SyntaxKind$ModuleDeclaration)) {
      visitor.visitModuleDeclaration_ezg4eu$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$FunctionDeclaration)) {
      visitor.visitFunctionDeclaration_eywj3y$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$VariableStatement)) {
      visitor.visitVariableStatement_x0poxd$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$EnumDeclaration)) {
      visitor.visitEnumDeclaration_1emvp1$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$ClassDeclaration)) {
      visitor.visitClassDeclaration_4wvyue$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$InterfaceDeclaration)) {
      visitor.visitInterfaceDeclaration_f4u3$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$TypeAliasDeclaration)) {
      visitor.visitTypeAliasDeclaration_it7xrc$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$HeritageClause)) {
      visitor.visitHeritageClause_10qtta$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$Constructor)) {
      visitor.visitConstructorDeclaration_cz84f8$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$ConstructSignature)) {
      visitor.visitConstructSignatureDeclaration_cz84f8$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$MethodDeclaration) || Kotlin.equals(tmp$, SyntaxKind$MethodSignature)) {
      visitor.visitMethodDeclaration_7vsj57$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$PropertyDeclaration) || Kotlin.equals(tmp$, SyntaxKind$PropertySignature)) {
      visitor.visitPropertyDeclaration_qnxew1$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$IndexSignature)) {
      visitor.visitIndexSignature_53if9s$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$CallSignature)) {
      visitor.visitSignatureDeclaration_vb212e$(node);
    }
     else if (Kotlin.equals(tmp$, SyntaxKind$ExportAssignment)) {
      visitor.visitExportAssignment_fybyfv$(node);
    }
     else if (!Kotlin.equals(tmp$, SyntaxKind$ImportEqualsDeclaration))
      if (!Kotlin.equals(tmp$, SyntaxKind$EndOfFileToken))
        reportUnsupportedNode(node);
  }
  var get_arr = Kotlin.defineInlineFunction('ts2kt.ts2kt.get_arr_wattn2$', function ($receiver) {
    return $receiver;
  });
  var get_str = Kotlin.defineInlineFunction('ts2kt.ts2kt.get_str_g3v1o4$', function ($receiver) {
    return Kotlin.kotlin.js.get_js_1yb8b7$(Kotlin.getKClass(_.$$importsForInline$$.typescript.SyntaxKind))[$receiver];
  });
  var get_id = Kotlin.defineInlineFunction('ts2kt.ts2kt.get_id_g3v1o4$', function ($receiver) {
    return $receiver;
  });
  var get_unescapedText = Kotlin.defineInlineFunction('ts2kt.ts2kt.get_unescapedText_viuja6$', function ($receiver) {
    return _.$$importsForInline$$.typescript.unescapeIdentifier($receiver.text);
  });
  function format($receiver) {
    return (Kotlin.numberToInt($receiver.line) + 1 | 0).toString() + ':' + (Kotlin.numberToInt($receiver.character) + 1 | 0);
  }
  function location($receiver) {
    var start = $receiver.getSourceFile().getLineAndCharacterOfPosition($receiver.pos);
    var end = $receiver.getSourceFile().getLineAndCharacterOfPosition($receiver.end);
    return $receiver.getSourceFile().fileName + ':' + format(start) + ' to ' + format(end);
  }
  var hasFlag = Kotlin.defineInlineFunction('ts2kt.ts2kt.hasFlag_j50xv2$', function (flags, flag) {
    return (flags & flag) !== 0;
  });
  function TsClassToKt(typeMapper, kind, annotations, isOverride, isOverrideProperty, hasMembersOpenModifier) {
    if (kind === void 0)
      kind = KtClassKind$CLASS_getInstance();
    if (annotations === void 0)
      annotations = DEFAULT_ANNOTATION;
    if (hasMembersOpenModifier === void 0)
      hasMembersOpenModifier = true;
    TsClassifierToKt.call(this, typeMapper, isOverride, isOverrideProperty);
    this.kind = kind;
    this.annotations = annotations;
    this.hasMembersOpenModifier_540skx$_0 = hasMembersOpenModifier;
    this.needsNoImpl_540skx$_0 = true;
    this.isInterface_540skx$_0 = false;
    this.typeParams = null;
    this.paramsOfConstructors = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
  }
  Object.defineProperty(TsClassToKt.prototype, 'hasMembersOpenModifier', {
    get: function () {
      return this.hasMembersOpenModifier_540skx$_0;
    }
  });
  Object.defineProperty(TsClassToKt.prototype, 'needsNoImpl', {
    get: function () {
      return this.needsNoImpl_540skx$_0;
    }
  });
  Object.defineProperty(TsClassToKt.prototype, 'isInterface', {
    get: function () {
      return this.isInterface_540skx$_0;
    }
  });
  TsClassToKt.prototype.visitClassDeclaration_4wvyue$ = function (node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.name = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$ = node.name) != null ? tmp$ : Kotlin.throwNPE()).text);
    this.typeParams = (tmp$_0 = node.typeParameters) != null ? toKotlinTypeParams(tmp$_0, this.typeMapper) : null;
    if ((tmp$_2 = (tmp$_1 = node.heritageClauses) != null ? tmp$_1 : null) != null) {
      var tmp$_3;
      for (tmp$_3 = 0; tmp$_3 !== tmp$_2.length; ++tmp$_3) {
        var element = tmp$_2[tmp$_3];
        visitNode(this, element);
      }
    }
    var $receiver = node.members;
    var tmp$_4;
    for (tmp$_4 = 0; tmp$_4 !== $receiver.length; ++tmp$_4) {
      var element_0 = $receiver[tmp$_4];
      visitNode(this, element_0);
    }
  };
  TsClassToKt.prototype.visitConstructorDeclaration_cz84f8$ = function (node) {
    var paramsOverloads = toKotlinParamsOverloads(node.parameters, this.typeMapper);
    this.paramsOfConstructors.addAll_brywnq$(paramsOverloads);
    assert(node.body == null, "A constructor in declarations file should not have body, constructor in '" + Kotlin.toString(this.name));
  };
  TsClassToKt.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TsClassToKt',
    interfaces: [TsClassifierToKt]
  };
  function TsClassifierToKt(typeMapper, isOverride, isOverrideProperty) {
    TypeScriptToKotlinBase.call(this);
    this.typeMapper = typeMapper;
    this.isOverride = isOverride;
    this.isOverrideProperty = isOverrideProperty;
    this.parents = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    this.name = null;
    this.staticTranslator = null;
  }
  TsClassifierToKt.prototype.visitHeritageClause_10qtta$ = function (node) {
    var tmp$, tmp$_0, tmp$_1;
    var tmp$_2;
    if ((tmp$_0 = (tmp$ = node.types) != null ? tmp$ : null) != null) {
      var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(tmp$_0.length);
      var tmp$_3;
      for (tmp$_3 = 0; tmp$_3 !== tmp$_0.length; ++tmp$_3) {
        var item = tmp$_0[tmp$_3];
        destination.add_11rb$(new KtHeritageType(stringify(toKotlinType_3(item, this.typeMapper))));
      }
      tmp$_2 = destination;
    }
     else
      tmp$_2 = null;
    var types = (tmp$_1 = tmp$_2) != null ? tmp$_1 : Kotlin.kotlin.collections.emptyList_287e2$();
    this.parents.addAll_brywnq$(types);
  };
  TsClassifierToKt.prototype.visitIndexSignature_53if9s$ = function (node) {
    this.translateAccessor_2v9abf$_0(node, true);
    this.translateAccessor_2v9abf$_0(node, false);
  };
  TsClassifierToKt.prototype.translateAccessor_2v9abf$_0 = function (node, isGetter) {
    var tmp$;
    tmp$ = toKotlinParamsOverloads(node.parameters, this.typeMapper).iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
      if (isGetter) {
        tmp$_4 = KtTypeUnion([(tmp$_1 = (tmp$_0 = node.type) != null ? toKotlinType_2(tmp$_0, this.typeMapper) : null) != null ? tmp$_1 : new KtType(ANY)]);
      }
       else {
        tmp$_4 = (tmp$_3 = (tmp$_2 = node.type) != null ? toKotlinTypeUnion_0(tmp$_2, this.typeMapper) : null) != null ? tmp$_3 : KtTypeUnion([new KtType(ANY)]);
      }
      var propTypeUnion = tmp$_4;
      var tmp$_5;
      tmp$_5 = propTypeUnion.possibleTypes.iterator();
      while (tmp$_5.hasNext()) {
        var element_0 = tmp$_5.next();
        var callSignature;
        var accessorName;
        var annotation;
        if (isGetter) {
          callSignature = new KtCallSignature(element, Kotlin.kotlin.collections.emptyList_287e2$(), new KtTypeAnnotation(element_0.copy_v60rl8$(void 0, void 0, void 0, true)));
          accessorName = GET;
          annotation = NATIVE_GETTER_ANNOTATION;
        }
         else {
          callSignature = new KtCallSignature(listOf_0([element.get_za3lpa$(0), new KtFunParam('value', new KtTypeAnnotation(element_0))]), Kotlin.kotlin.collections.emptyList_287e2$(), new KtTypeAnnotation(new KtType(UNIT)));
          accessorName = SET;
          annotation = NATIVE_SETTER_ANNOTATION;
        }
        this.addFunction_w4d6mw$(accessorName, callSignature, void 0, this.needsNoImpl, listOf(annotation), void 0, true);
      }
    }
  };
  TsClassifierToKt.prototype.getTranslator_uhzyw$ = function (node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var tmp$_4;
    if ((tmp$_0 = (tmp$ = node.modifiers) != null ? tmp$ : null) != null) {
      var any$result;
      any$break: do {
        var tmp$_5;
        for (tmp$_5 = 0; tmp$_5 !== tmp$_0.length; ++tmp$_5) {
          var element = tmp$_0[tmp$_5];
          if (element.kind === SyntaxKind$StaticKeyword) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$_4 = any$result;
    }
     else
      tmp$_4 = null;
    if ((tmp$_1 = tmp$_4) != null ? tmp$_1 : false) {
      if (this.staticTranslator == null) {
        this.staticTranslator = new TsClassToKt(this.typeMapper, KtClassKind$COMPANION_OBJECT_getInstance(), Kotlin.kotlin.collections.emptyList_287e2$(), NOT_OVERRIDE, NOT_OVERRIDE, false);
        (tmp$_2 = this.staticTranslator) != null ? (tmp$_2.name = '') : null;
      }
      return (tmp$_3 = this.staticTranslator) != null ? tmp$_3 : Kotlin.throwNPE();
    }
    return this;
  };
  TsClassifierToKt.prototype.needsNoImpl_qnxew1$ = function (node) {
    return true;
  };
  TsClassifierToKt.prototype.isNullable_qnxew1$ = function (node) {
    return false;
  };
  TsClassifierToKt.prototype.isLambda_qnxew1$ = function (node) {
    return false;
  };
  TsClassifierToKt.prototype.needsNoImpl_7vsj57$ = function (node) {
    return true;
  };
  TsClassifierToKt.prototype.visitPropertyDeclaration_qnxew1$ = function (node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var declarationName = (tmp$ = node.name) != null ? tmp$ : Kotlin.throwNPE();
    tmp$_0 = this.asString_pzw23a$_0(declarationName);
    if (tmp$_0 == null) {
      return;
    }
    var name = tmp$_0;
    var varType = (tmp$_2 = (tmp$_1 = node.type) != null ? toKotlinType_2(tmp$_1, this.typeMapper) : null) != null ? tmp$_2 : new KtType(ANY);
    var isOverride = this.isOverrideProperty(node);
    this.getTranslator_uhzyw$(node).addVariable_xvlet$(name, varType.copy_v60rl8$(void 0, void 0, void 0, varType.isNullable || this.isNullable_qnxew1$(node), this.isLambda_qnxew1$(node)), void 0, void 0, void 0, this.needsNoImpl_qnxew1$(node), void 0, isOverride);
  };
  TsClassifierToKt.prototype.addFunction_h4pyhe$ = function ($receiver, name, isOverride, needsNoImpl, node) {
    var tmp$;
    tmp$ = toKotlinCallSignatureOverloads(node, $receiver.typeMapper).iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      $receiver.addFunction_w4d6mw$(name, element, void 0, $receiver.needsNoImpl_7vsj57$(node), void 0, isOverride);
    }
    assert(node.body == null, "An function in declarations file should not have body, function '" + Kotlin.toString($receiver.name) + '.' + name + "'");
  };
  TsClassifierToKt.prototype.visitMethodDeclaration_7vsj57$ = function (node) {
    var tmp$, tmp$_0;
    var declarationName = (tmp$ = node.name) != null ? tmp$ : Kotlin.throwNPE();
    tmp$_0 = this.asString_pzw23a$_0(declarationName);
    if (tmp$_0 == null) {
      return;
    }
    var name = tmp$_0;
    var isOverride = this.isOverride(node);
    this.addFunction_h4pyhe$(this.getTranslator_uhzyw$(node), name, isOverride, this.needsNoImpl, node);
  };
  TsClassifierToKt.prototype.asString_pzw23a$_0 = function ($receiver) {
    if (Kotlin.equals($receiver.kind, SyntaxKind$Identifier)) {
      return _.$$importsForInline$$.typescript.unescapeIdentifier($receiver.text);
    }
     else {
      reportUnsupportedNode($receiver);
      return null;
    }
  };
  TsClassifierToKt.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TsClassifierToKt',
    interfaces: [TypeScriptToKotlinBase]
  };
  function TsInterfaceToKt(typeMapper, annotations, isOverride, isOverrideProperty) {
    TsClassifierToKt.call(this, typeMapper, isOverride, isOverrideProperty);
    this.annotations = annotations;
    this.hasMembersOpenModifier_i0th2m$_0 = false;
    this.needsNoImpl_i0th2m$_0 = false;
    this.isInterface_i0th2m$_0 = true;
    this.typeParams = null;
  }
  Object.defineProperty(TsInterfaceToKt.prototype, 'hasMembersOpenModifier', {
    get: function () {
      return this.hasMembersOpenModifier_i0th2m$_0;
    }
  });
  Object.defineProperty(TsInterfaceToKt.prototype, 'needsNoImpl', {
    get: function () {
      return this.needsNoImpl_i0th2m$_0;
    }
  });
  Object.defineProperty(TsInterfaceToKt.prototype, 'isInterface', {
    get: function () {
      return this.isInterface_i0th2m$_0;
    }
  });
  TsInterfaceToKt.prototype.needsNoImpl_qnxew1$ = function (node) {
    return node.questionToken != null;
  };
  TsInterfaceToKt.prototype.isNullable_qnxew1$ = function (node) {
    return node.questionToken != null;
  };
  TsInterfaceToKt.prototype.isLambda_qnxew1$ = function (node) {
    var tmp$;
    return ((tmp$ = node.type) != null ? tmp$.kind : null) === SyntaxKind$FunctionType;
  };
  TsInterfaceToKt.prototype.needsNoImpl_7vsj57$ = function (node) {
    return false;
  };
  TsInterfaceToKt.prototype.addFunction_h4pyhe$ = function ($receiver, name, isOverride, needsNoImpl, node) {
    var isOptional = node.questionToken != null;
    if (isOptional) {
      var call = toKotlinCallSignature(node, $receiver.typeMapper);
      $receiver.addVariable_xvlet$(name, createFunctionType(call.params, call.returnType.type).copy_v60rl8$(void 0, void 0, void 0, true), void 0, call.typeParams, false, true, void 0, isOverride);
    }
     else {
      var tmp$;
      tmp$ = toKotlinCallSignatureOverloads(node, $receiver.typeMapper).iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        $receiver.addFunction_w4d6mw$(name, element, void 0, false, void 0, isOverride);
      }
    }
  };
  TsInterfaceToKt.prototype.visitInterfaceDeclaration_f4u3$ = function (node) {
    var tmp$, tmp$_0, tmp$_1;
    this.name = _.$$importsForInline$$.typescript.unescapeIdentifier(node.name.text);
    this.typeParams = (tmp$ = node.typeParameters) != null ? toKotlinTypeParams(tmp$, this.typeMapper) : null;
    if ((tmp$_1 = (tmp$_0 = node.heritageClauses) != null ? tmp$_0 : null) != null) {
      var tmp$_2;
      for (tmp$_2 = 0; tmp$_2 !== tmp$_1.length; ++tmp$_2) {
        var element = tmp$_1[tmp$_2];
        visitNode(this, element);
      }
    }
    var $receiver = node.members;
    var tmp$_3;
    for (tmp$_3 = 0; tmp$_3 !== $receiver.length; ++tmp$_3) {
      var element_0 = $receiver[tmp$_3];
      visitNode(this, element_0);
    }
  };
  TsInterfaceToKt.prototype.visitSignatureDeclaration_vb212e$ = function (node) {
    var tmp$;
    tmp$ = toKotlinCallSignatureOverloads(node, this.typeMapper).iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      this.addFunction_w4d6mw$(INVOKE, element, void 0, false, listOf(NATIVE_INVOKE_ANNOTATION), void 0, true);
    }
  };
  TsInterfaceToKt.prototype.visitConstructSignatureDeclaration_cz84f8$ = function (node) {
  };
  TsInterfaceToKt.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TsInterfaceToKt',
    interfaces: [TsClassifierToKt]
  };
  function TsInterfaceToKtExtensions(typeMapper, annotations, isOverride, isOverrideProperty) {
    TsInterfaceToKt.call(this, typeMapper, annotations, isOverride, isOverrideProperty);
    this.cachedExtendsType$delegate = lazy(TsInterfaceToKtExtensions$cachedExtendsType$lambda(this));
  }
  Object.defineProperty(TsInterfaceToKtExtensions.prototype, 'cachedExtendsType', {
    get: function () {
      var $receiver = this.cachedExtendsType$delegate;
      new Kotlin.PropertyMetadata('cachedExtendsType');
      return $receiver.value;
    }
  });
  TsInterfaceToKtExtensions.prototype.getExtendsType_t5xv9l$ = function (typeParams) {
    var tmp$, tmp$_0;
    return ((tmp$ = this.name) != null ? tmp$ : Kotlin.throwNPE()) + Kotlin.toString((tmp$_0 = typeParams != null ? join(typeParams, void 0, void 0, void 0, '<', '>', void 0, Kotlin.getCallableRef('stringify', function ($receiver) {
      return stringify($receiver);
    })) : null) != null ? tmp$_0 : '');
  };
  TsInterfaceToKtExtensions.prototype.fixIfClashWith_9pzgf3$ = function ($receiver, another) {
    var tmp$, tmp$_0;
    if ($receiver == null || another == null)
      return $receiver;
    assert($receiver !== another, 'expected this !== another, this = ' + Kotlin.toString($receiver) + ', another = ' + Kotlin.toString(another));
    var extendsTypeParams = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var e = tmp$.next();
      var toAdd = {v: e.name};
      var i = 0;
      while (true) {
        var any$result;
        any$break: do {
          var tmp$_1;
          tmp$_1 = another.iterator();
          while (tmp$_1.hasNext()) {
            var element = tmp$_1.next();
            if (Kotlin.equals(element.name, toAdd.v)) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        if (!any$result)
          break;
        toAdd.v = e.name + Kotlin.toString((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0));
      }
      extendsTypeParams.add_11rb$(new KtTypeParam(toAdd.v, e.upperBound));
    }
    return extendsTypeParams;
  };
  TsInterfaceToKtExtensions.prototype.merge_9pzgf3$ = function ($receiver, another) {
    if ($receiver == null)
      return another;
    else if (another == null)
      return $receiver;
    else
      return plus($receiver, another);
  };
  TsInterfaceToKtExtensions.prototype.withNativeAnnotation_dk8kn7$ = function ($receiver) {
    var $receiver_0 = this.defaultAnnotations;
    var predicate = IS_NATIVE_ANNOTATION;
    var any$result;
    any$break: do {
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          any$result = true;
          break any$break;
        }
      }
      any$result = false;
    }
     while (false);
    var tmp$_0 = any$result;
    if (!tmp$_0) {
      var predicate_0 = IS_NATIVE_ANNOTATION;
      var any$result_0;
      any$break: do {
        var tmp$_1;
        tmp$_1 = $receiver.iterator();
        while (tmp$_1.hasNext()) {
          var element_0 = tmp$_1.next();
          if (predicate_0(element_0)) {
            any$result_0 = true;
            break any$break;
          }
        }
        any$result_0 = false;
      }
       while (false);
      tmp$_0 = any$result_0;
    }
    if (tmp$_0)
      return $receiver;
    else {
      var list = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      list.add_11rb$(NATIVE_ANNOTATION);
      list.addAll_brywnq$($receiver);
      return list;
    }
  };
  TsInterfaceToKtExtensions.prototype.addVariable_xvlet$$default = function (name, type, extendsType, typeParams, isVar, needsNoImpl, additionalAnnotations, isOverride) {
    var typeParamsWithoutClashes = this.fixIfClashWith_9pzgf3$(this.typeParams, typeParams);
    var actualExtendsType = typeParamsWithoutClashes === this.typeParams ? this.cachedExtendsType : this.getExtendsType_t5xv9l$(typeParamsWithoutClashes);
    var annotations = this.withNativeAnnotation_dk8kn7$(additionalAnnotations);
    this.addVariable_xvlet$(name, type, actualExtendsType, this.merge_9pzgf3$(typeParamsWithoutClashes, typeParams), isVar, true, annotations, isOverride, TsInterfaceToKt.prototype.addVariable_xvlet$$default.bind(this));
  };
  TsInterfaceToKtExtensions.prototype.addFunction_w4d6mw$$default = function (name, callSignature, extendsType, needsNoImpl, additionalAnnotations, isOverride, isOperator) {
    var typeParamsWithoutClashes = this.fixIfClashWith_9pzgf3$(this.typeParams, callSignature.typeParams);
    var actualExtendsType = typeParamsWithoutClashes === this.typeParams ? this.cachedExtendsType : this.getExtendsType_t5xv9l$(typeParamsWithoutClashes);
    var annotations = this.withNativeAnnotation_dk8kn7$(additionalAnnotations);
    this.addFunction_w4d6mw$(name, new KtCallSignature(callSignature.params, this.merge_9pzgf3$(typeParamsWithoutClashes, callSignature.typeParams), callSignature.returnType), actualExtendsType, true, annotations, isOverride, isOperator, TsInterfaceToKt.prototype.addFunction_w4d6mw$$default.bind(this));
  };
  function TsInterfaceToKtExtensions$cachedExtendsType$lambda(this$TsInterfaceToKtExtensions) {
    return function () {
      return this$TsInterfaceToKtExtensions.getExtendsType_t5xv9l$(this$TsInterfaceToKtExtensions.typeParams);
    };
  }
  TsInterfaceToKtExtensions.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TsInterfaceToKtExtensions',
    interfaces: [TsInterfaceToKt]
  };
  var JS_MODULE;
  var JS_QUALIFIER;
  var NATIVE;
  var NATIVE_ANNOTATION;
  var NATIVE_GETTER_ANNOTATION;
  var NATIVE_SETTER_ANNOTATION;
  var NATIVE_INVOKE_ANNOTATION;
  var DEFAULT_ANNOTATION;
  var NO_ANNOTATIONS;
  var INVOKE;
  var GET;
  var SET;
  function COMPARE_BY_NAME$lambda(a, b) {
    return Kotlin.equals(a.name, b.name);
  }
  var COMPARE_BY_NAME;
  function IS_NATIVE_ANNOTATION$lambda(a) {
    return Kotlin.equals(a.name, NATIVE);
  }
  var IS_NATIVE_ANNOTATION;
  function TypeScriptToKotlin(defaultAnnotations, requiredModifier, moduleName, typeMapper, isInterface, isOwnDeclaration, isOverride, isOverrideProperty, qualifier) {
    if (defaultAnnotations === void 0)
      defaultAnnotations = DEFAULT_ANNOTATION;
    if (requiredModifier === void 0)
      requiredModifier = SyntaxKind$DeclareKeyword;
    if (moduleName === void 0)
      moduleName = null;
    if (typeMapper === void 0)
      typeMapper = null;
    if (isInterface === void 0)
      isInterface = false;
    if (isOwnDeclaration === void 0)
      isOwnDeclaration = TypeScriptToKotlin_init$lambda;
    if (qualifier === void 0) {
      qualifier = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    TypeScriptToKotlinBase.call(this);
    this.defaultAnnotations_x3dap3$_0 = defaultAnnotations;
    this.requiredModifier = requiredModifier;
    this.moduleName = moduleName;
    this.isInterface_x3dap3$_0 = isInterface;
    this.isOwnDeclaration = isOwnDeclaration;
    this.isOverride = isOverride;
    this.isOverrideProperty = isOverrideProperty;
    this.qualifier_0 = qualifier;
    this._packageParts_0 = mutableListOf([new KtPackagePart(this.qualifier_0, this.declarations, this.packagePartAnnotations())]);
    this.hasMembersOpenModifier_x3dap3$_0 = false;
    this.exportedByAssignment = Kotlin.kotlin.collections.HashMap_init_q3lmfv$();
    this.typeAliases_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    this.typeMapper = typeMapper != null ? typeMapper : new ObjectTypeToKotlinTypeMapperImpl(this.defaultAnnotations, this.declarations, this.typeAliases_0);
  }
  Object.defineProperty(TypeScriptToKotlin.prototype, 'defaultAnnotations', {
    get: function () {
      return this.defaultAnnotations_x3dap3$_0;
    }
  });
  Object.defineProperty(TypeScriptToKotlin.prototype, 'isInterface', {
    get: function () {
      return this.isInterface_x3dap3$_0;
    }
  });
  TypeScriptToKotlin.prototype.packagePartAnnotations = function () {
    if (this.qualifier_0.isEmpty())
      return this.defaultAnnotations;
    return plus_0(this.defaultAnnotations, new KtAnnotation(JS_QUALIFIER, listOf(new KtArgument(joinToString(this.qualifier_0, '.', '"', '"')))));
  };
  Object.defineProperty(TypeScriptToKotlin.prototype, 'packageParts', {
    get: function () {
      assert(this.exportedByAssignment.isEmpty(), 'exportedByAssignment should be empty, but it contains: ' + this.exportedByAssignment.keys.toString());
      return this._packageParts_0;
    }
  });
  Object.defineProperty(TypeScriptToKotlin.prototype, 'hasMembersOpenModifier', {
    get: function () {
      return this.hasMembersOpenModifier_x3dap3$_0;
    }
  });
  TypeScriptToKotlin.prototype.getAdditionalAnnotations_uvf806$ = function (node) {
    var tmp$, tmp$_0, tmp$_1;
    var tmp$_2 = this.requiredModifier === SyntaxKind$DeclareKeyword;
    if (tmp$_2) {
      var tmp$_3;
      if ((tmp$_0 = (tmp$ = node.modifiers) != null ? tmp$ : null) != null) {
        var any$result;
        any$break: do {
          var tmp$_4;
          for (tmp$_4 = 0; tmp$_4 !== tmp$_0.length; ++tmp$_4) {
            var element = tmp$_0[tmp$_4];
            if (element.kind === this.requiredModifier) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        tmp$_3 = any$result;
      }
       else
        tmp$_3 = null;
      tmp$_2 = !((tmp$_1 = tmp$_3) != null ? tmp$_1 : false);
    }
    var isShouldSkip = tmp$_2;
    if (isShouldSkip)
      return DEFAULT_FAKE_ANNOTATION;
    return NO_ANNOTATIONS;
  };
  TypeScriptToKotlin.prototype.visitTypeAliasDeclaration_it7xrc$ = function (node) {
    var tmp$;
    var newTypeMapper = this.typeMapper.withTypeParameters_le0eav$(node.typeParameters);
    var typeParams = (tmp$ = node.typeParameters) != null ? toKotlinTypeParams(tmp$, newTypeMapper) : null;
    this.typeAliases_0.add_11rb$(new KtTypeAlias(node.name.text, typeParams, toKotlinTypeUnion_0(node.type, newTypeMapper)));
  };
  TypeScriptToKotlin.prototype.visitVariableStatement_x0poxd$ = function (node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var additionalAnnotations = this.getAdditionalAnnotations_uvf806$(node);
    var declarations = node.declarationList.declarations;
    for (tmp$ = 0; tmp$ !== declarations.length; ++tmp$) {
      var d = declarations[tmp$];
      var name = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$_0 = d.name) != null ? tmp$_0 : Kotlin.throwNPE()).text);
      var varType = (tmp$_2 = (tmp$_1 = d.type) != null ? toKotlinType_2(tmp$_1, this.typeMapper) : null) != null ? tmp$_2 : new KtType(ANY);
      this.addVariable_xvlet$(name, varType, void 0, void 0, void 0, void 0, additionalAnnotations);
    }
  };
  TypeScriptToKotlin.prototype.visitFunctionDeclaration_eywj3y$ = function (node) {
    var tmp$;
    var additionalAnnotations = this.getAdditionalAnnotations_uvf806$(node);
    var name = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$ = node.name) != null ? tmp$ : Kotlin.throwNPE()).text);
    var tmp$_0;
    tmp$_0 = toKotlinCallSignatureOverloads(node, this.typeMapper).iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      this.addFunction_w4d6mw$(name, element, void 0, void 0, additionalAnnotations);
    }
  };
  TypeScriptToKotlin.prototype.visitInterfaceDeclaration_f4u3$ = function (node) {
    if (!this.isOwnDeclaration.call(this, node.name)) {
      var translator = new TsInterfaceToKtExtensions(this.typeMapper, this.defaultAnnotations, this.isOverride, this.isOverrideProperty);
      translator.visitInterfaceDeclaration_f4u3$(node);
      this.declarations.addAll_brywnq$(translator.declarations);
    }
     else {
      var translator_0 = new TsInterfaceToKt(this.typeMapper, this.defaultAnnotations, this.isOverride, this.isOverrideProperty);
      translator_0.visitInterfaceDeclaration_f4u3$(node);
      this.declarations.add_11rb$(createClassifier(translator_0));
    }
  };
  TypeScriptToKotlin.prototype.visitClassDeclaration_4wvyue$ = function (node) {
    var additionalAnnotations = this.getAdditionalAnnotations_uvf806$(node);
    var translator = new TsClassToKt(this.typeMapper, void 0, plus(this.defaultAnnotations, additionalAnnotations), this.isOverride, this.isOverrideProperty);
    translator.visitClassDeclaration_4wvyue$(node);
    var result = createClassifier_0(translator);
    if (result != null) {
      this.declarations.add_11rb$(result);
    }
  };
  TypeScriptToKotlin.prototype.visitEnumDeclaration_1emvp1$ = function (node) {
    var $receiver = node.members;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      var tmp$_0 = destination.add_11rb$;
      var tmp$_1, tmp$_2;
      tmp$_1 = _.$$importsForInline$$.typescript.unescapeIdentifier(item.name.text);
      var tmp$_3;
      if ((tmp$_2 = item.initializer) != null) {
        var block$result;
        if (Kotlin.equals(tmp$_2.kind, SyntaxKind$FirstLiteralToken)) {
          block$result = tmp$_2.text;
        }
         else {
          block$result = reportUnsupportedNode(tmp$_2);
        }
        tmp$_3 = block$result;
      }
       else
        tmp$_3 = null;
      tmp$_0.call(destination, new KtEnumEntry(tmp$_1, tmp$_3));
    }
    var entries = destination;
    var enumClass = new KtClassifier(KtClassKind$ENUM_getInstance(), _.$$importsForInline$$.typescript.unescapeIdentifier(node.name.text), Kotlin.kotlin.collections.emptyList_287e2$(), Kotlin.kotlin.collections.emptyList_287e2$(), Kotlin.kotlin.collections.emptyList_287e2$(), entries, Kotlin.kotlin.collections.emptyList_287e2$(), false);
    this.declarations.add_11rb$(enumClass);
  };
  function TypeScriptToKotlin$visitModuleDeclaration$getName(node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    tmp$_0 = ((tmp$ = node.name) != null ? tmp$ : Kotlin.throwNPE()).kind;
    if (Kotlin.equals(tmp$_0, SyntaxKind$Identifier) || Kotlin.equals(tmp$_0, SyntaxKind$StringLiteral)) {
      tmp$_3 = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$_1 = node.name) != null ? tmp$_1 : Kotlin.throwNPE()).text);
    }
     else {
      reportUnsupportedNode((tmp$_2 = node.name) != null ? tmp$_2 : Kotlin.throwNPE());
      tmp$_3 = '???';
    }
    return tmp$_3;
  }
  function TypeScriptToKotlin$visitModuleDeclaration$lambda(closure$tr, closure$name) {
    return function () {
      var $receiver = closure$tr.declarations;
      var all$result;
      all$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var closure$name_0 = closure$name;
          var $receiver_0 = element.annotations;
          var any$result;
          any$break: do {
            var tmp$_0;
            tmp$_0 = $receiver_0.iterator();
            while (tmp$_0.hasNext()) {
              var element_0 = tmp$_0.next();
              if (Kotlin.equals(element_0.name, JS_MODULE) && Kotlin.equals(getFirstParamAsString(element_0), closure$name_0)) {
                any$result = true;
                break any$break;
              }
            }
            any$result = false;
          }
           while (false);
          if (!any$result) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      return all$result;
    };
  }
  TypeScriptToKotlin.prototype.visitModuleDeclaration_ezg4eu$ = function (node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var additionalAnnotations = this.getAdditionalAnnotations_uvf806$(node);
    var getName = TypeScriptToKotlin$visitModuleDeclaration$getName;
    var rightNode = node;
    var body = node.body;
    var qualifiedName = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    while (body.kind !== SyntaxKind$ModuleBlock) {
      assert(body.kind === SyntaxKind$ModuleDeclaration, 'Expected that it is ModuleDeclaration, but ' + body.kind.str);
      var element = getName(rightNode);
      qualifiedName.add_11rb$(element);
      rightNode = body;
      body = body.body;
    }
    var name = getName(rightNode);
    qualifiedName.add_11rb$(name);
    var tr = new TypeScriptToKotlin(additionalAnnotations, SyntaxKind$ExportKeyword, name, void 0, void 0, this.isOwnDeclaration, this.isOverride, this.isOverrideProperty, plus(this.qualifier_0, qualifiedName));
    tr.visitList_uvf806$(body);
    var isExternalModule = ((tmp$ = rightNode.name) != null ? tmp$ : Kotlin.throwNPE()).kind === SyntaxKind$StringLiteral;
    if (isExternalModule && tr.exportedByAssignment.isEmpty()) {
      var $receiver = tr.declarations;
      var all$result;
      all$break: do {
        var tmp$_3;
        tmp$_3 = $receiver.iterator();
        while (tmp$_3.hasNext()) {
          var element_0 = tmp$_3.next();
          var $receiver_0 = element_0.annotations;
          var any$result;
          any$break: do {
            var tmp$_4;
            tmp$_4 = $receiver_0.iterator();
            while (tmp$_4.hasNext()) {
              var element_1 = tmp$_4.next();
              if (Kotlin.equals(element_1, FAKE_ANNOTATION)) {
                any$result = true;
                break any$break;
              }
            }
            any$result = false;
          }
           while (false);
          var tmp$_5 = any$result;
          if (!tmp$_5) {
            var tmp$_6 = Kotlin.isType(element_0, KtClassifier) && element_0.kind === KtClassKind$INTERFACE_getInstance();
            if (tmp$_6) {
              var $receiver_1 = element_0.annotations;
              var all$result_0;
              all$break_0: do {
                var tmp$_7;
                tmp$_7 = $receiver_1.iterator();
                while (tmp$_7.hasNext()) {
                  var element_2 = tmp$_7.next();
                  if (!!Kotlin.equals(element_2.name, JS_MODULE)) {
                    all$result_0 = false;
                    break all$break_0;
                  }
                }
                all$result_0 = true;
              }
               while (false);
              tmp$_6 = all$result_0;
            }
            tmp$_5 = tmp$_6;
          }
          if (!tmp$_5) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      var areAllFakeOrInterface = all$result;
      var areAllPartOfThisModule = TypeScriptToKotlin$visitModuleDeclaration$lambda(tr, name);
      if (areAllFakeOrInterface) {
        tmp$_0 = tr.declarations.iterator();
        while (tmp$_0.hasNext()) {
          var d = tmp$_0.next();
          var $receiver_2 = d.annotations;
          var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
          var tmp$_8;
          tmp$_8 = $receiver_2.iterator();
          while (tmp$_8.hasNext()) {
            var element_3 = tmp$_8.next();
            if (!Kotlin.equals(element_3, FAKE_ANNOTATION)) {
              destination.add_11rb$(element_3);
            }
          }
          d.annotations = destination;
        }
      }
       else if (areAllPartOfThisModule()) {
        if (tr.declarations.size === 1 && Kotlin.isType(tr.declarations.get_za3lpa$(0), KtVariable)) {
          var d_0 = tr.declarations.get_za3lpa$(0);
          var $receiver_3 = d_0.annotations;
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_9;
            tmp$_9 = $receiver_3.iterator();
            while (tmp$_9.hasNext()) {
              var element_4 = tmp$_9.next();
              if (Kotlin.equals(element_4.name, JS_MODULE)) {
                firstOrNull$result = element_4;
                break firstOrNull$break;
              }
            }
            firstOrNull$result = null;
          }
           while (false);
          if ((tmp$_2 = (tmp$_1 = firstOrNull$result) != null ? getFirstParamAsString(tmp$_1) : null) != null) {
            d_0.name = tmp$_2;
          }
        }
        this.declarations.addAll_brywnq$(tr.declarations);
        return;
      }
    }
    var $receiver_4 = this._packageParts_0;
    var elements = tr._packageParts_0;
    Kotlin.kotlin.collections.addAll_ipc267$($receiver_4, elements);
    this.exportedByAssignment.putAll_a2k3zr$(tr.exportedByAssignment);
  };
  TypeScriptToKotlin.prototype.visitExportAssignment_fybyfv$ = function (node) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var tmp$_3;
    if ((tmp$ = node.name) != null)
      tmp$_3 = tmp$;
    else {
      var tmp$_4;
      tmp$_3 = node.expression.kind === SyntaxKind$Identifier ? Kotlin.isType(tmp$_4 = node.expression, Object) ? tmp$_4 : Kotlin.throwCCE() : reportUnsupportedNode(node);
    }
    tmp$_0 = tmp$_3;
    if (tmp$_0 == null) {
      return;
    }
    var exportIdentifier = tmp$_0;
    var exportName = _.$$importsForInline$$.typescript.unescapeIdentifier(exportIdentifier.text);
    tmp$_2 = listOf(new KtArgument('"' + ((tmp$_1 = this.moduleName) != null ? tmp$_1 : exportName) + '"'));
    var $receiver = this.exportedByAssignment;
    var value = new KtAnnotation(JS_MODULE, tmp$_2);
    $receiver.put_xwzc9p$(exportName, value);
  };
  TypeScriptToKotlin.prototype.visitList_uvf806$ = function (node) {
    TypeScriptToKotlinBase.prototype.visitList_uvf806$.call(this, node);
    this.finish();
  };
  TypeScriptToKotlin.prototype.finish = function () {
    this.fixExportAssignments();
  };
  function TypeScriptToKotlin$fixExportAssignments$process(this$TypeScriptToKotlin, closure$found) {
    return function (annotated, declarationName) {
      var tmp$, tmp$_0;
      tmp$ = this$TypeScriptToKotlin.exportedByAssignment.get_11rb$(declarationName);
      if (tmp$ == null) {
        return;
      }
      var annotation = tmp$;
      var annotationParamString = getFirstParamAsString(annotation);
      var t = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      tmp$_0 = annotated.annotations.iterator();
      while (tmp$_0.hasNext()) {
        var a = tmp$_0.next();
        if (Kotlin.equals(a, FAKE_ANNOTATION))
          continue;
        if (Kotlin.equals(a.name, JS_MODULE)) {
          if (Kotlin.equals(declarationName, annotationParamString))
            return;
          continue;
        }
        t.add_11rb$(a);
      }
      t.add_11rb$(annotation);
      annotated.annotations = t;
      if (Kotlin.isType(annotated, KtVariable)) {
        annotated.isVar = false;
      }
      closure$found.add_11rb$(declarationName);
    };
  }
  TypeScriptToKotlin.prototype.fixExportAssignments = function () {
    var tmp$;
    if (this.exportedByAssignment.isEmpty())
      return;
    var found = Kotlin.kotlin.collections.HashSet_init_287e2$();
    var process = TypeScriptToKotlin$fixExportAssignments$process(this, found);
    var tmp$_0;
    tmp$_0 = this.declarations.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      process(element, element.name);
    }
    var $receiver = this._packageParts_0;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_1;
    tmp$_1 = $receiver.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      if (!element_0.fqName.isEmpty() && Kotlin.equals(dropLast(element_0.fqName, 1), this.qualifier_0)) {
        destination.add_11rb$(element_0);
      }
    }
    var tmp$_2;
    tmp$_2 = destination.iterator();
    while (tmp$_2.hasNext()) {
      var element_1 = tmp$_2.next();
      process(element_1, last(element_1.fqName));
    }
    tmp$ = found.iterator();
    while (tmp$.hasNext()) {
      var key = tmp$.next();
      this.exportedByAssignment.remove_11rb$(key);
    }
  };
  function TypeScriptToKotlin_init$lambda(it) {
    return true;
  }
  TypeScriptToKotlin.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TypeScriptToKotlin',
    interfaces: [TypeScriptToKotlinBase]
  };
  function TypeScriptToKotlinBase() {
    this.defaultAnnotations_ihio0m$_0 = Kotlin.kotlin.collections.emptyList_287e2$();
    this.declarations = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
  }
  Object.defineProperty(TypeScriptToKotlinBase.prototype, 'defaultAnnotations', {
    get: function () {
      return this.defaultAnnotations_ihio0m$_0;
    }
  });
  TypeScriptToKotlinBase.prototype.addVariable_xvlet$$default = function (name, type, extendsType, typeParams, isVar, needsNoImpl, additionalAnnotations, isOverride) {
    var annotations = plus(this.defaultAnnotations, additionalAnnotations);
    this.declarations.add_11rb$(new KtVariable(name, new KtTypeAnnotation(type), extendsType != null ? new KtHeritageType(extendsType) : null, annotations, typeParams, isVar, needsNoImpl, this.isInterface, isOverride, this.hasMembersOpenModifier));
  };
  TypeScriptToKotlinBase.prototype.addVariable_xvlet$ = function (name, type, extendsType, typeParams, isVar, needsNoImpl, additionalAnnotations, isOverride, callback$default) {
    if (extendsType === void 0)
      extendsType = null;
    if (typeParams === void 0)
      typeParams = null;
    if (isVar === void 0)
      isVar = true;
    if (needsNoImpl === void 0)
      needsNoImpl = true;
    if (additionalAnnotations === void 0) {
      additionalAnnotations = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    if (isOverride === void 0)
      isOverride = false;
    callback$default ? callback$default(name, type, extendsType, typeParams, isVar, needsNoImpl, additionalAnnotations, isOverride) : this.addVariable_xvlet$$default(name, type, extendsType, typeParams, isVar, needsNoImpl, additionalAnnotations, isOverride);
  };
  TypeScriptToKotlinBase.prototype.addFunction_w4d6mw$$default = function (name, callSignature, extendsType, needsNoImpl, additionalAnnotations, isOverride, isOperator) {
    var annotations = plus(this.defaultAnnotations, additionalAnnotations);
    this.declarations.add_11rb$(new KtFunction(name, callSignature, extendsType != null ? new KtHeritageType(extendsType) : null, annotations, needsNoImpl, isOverride, this.hasMembersOpenModifier, isOperator));
  };
  TypeScriptToKotlinBase.prototype.addFunction_w4d6mw$ = function (name, callSignature, extendsType, needsNoImpl, additionalAnnotations, isOverride, isOperator, callback$default) {
    if (extendsType === void 0)
      extendsType = null;
    if (needsNoImpl === void 0)
      needsNoImpl = true;
    if (additionalAnnotations === void 0) {
      additionalAnnotations = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    if (isOverride === void 0)
      isOverride = false;
    if (isOperator === void 0)
      isOperator = false;
    callback$default ? callback$default(name, callSignature, extendsType, needsNoImpl, additionalAnnotations, isOverride, isOperator) : this.addFunction_w4d6mw$$default(name, callSignature, extendsType, needsNoImpl, additionalAnnotations, isOverride, isOperator);
  };
  TypeScriptToKotlinBase.prototype.visitList_uvf806$ = function (node) {
    forEachChild_0(this, node);
  };
  TypeScriptToKotlinBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TypeScriptToKotlinBase',
    interfaces: [Visitor]
  };
  function createClassifier($receiver) {
    var tmp$;
    return new KtClassifier(KtClassKind$INTERFACE_getInstance(), (tmp$ = $receiver.name) != null ? tmp$ : Kotlin.throwNPE(), Kotlin.kotlin.collections.emptyList_287e2$(), $receiver.typeParams, $receiver.parents, $receiver.declarations, $receiver.annotations, false);
  }
  function createClassifier_0($receiver) {
    var tmp$, tmp$_0, tmp$_1;
    if ($receiver.name == null)
      return null;
    var tmp$_2;
    if ((tmp$ = $receiver.staticTranslator) != null) {
      var $receiver_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var elements = $receiver.declarations;
      Kotlin.kotlin.collections.addAll_ipc267$($receiver_0, elements);
      var tmp$_3;
      var element = (tmp$_3 = createClassifier_0(tmp$)) != null ? tmp$_3 : Kotlin.throwNPE();
      $receiver_0.add_11rb$(element);
      tmp$_2 = $receiver_0;
    }
     else
      tmp$_2 = null;
    var members = (tmp$_0 = tmp$_2) != null ? tmp$_0 : $receiver.declarations;
    return new KtClassifier($receiver.kind, (tmp$_1 = $receiver.name) != null ? tmp$_1 : Kotlin.throwNPE(), $receiver.paramsOfConstructors, $receiver.typeParams, $receiver.parents, members, $receiver.annotations, $receiver.kind === KtClassKind$CLASS_getInstance());
  }
  function ObjectTypeToKotlinTypeMapper() {
  }
  ObjectTypeToKotlinTypeMapper.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'ObjectTypeToKotlinTypeMapper',
    interfaces: []
  };
  function ObjectTypeToKotlinTypeMapperImpl(defaultAnnotations, declarations, typeAliases, typeParameterDeclarations) {
    ObjectTypeToKotlinTypeMapperImpl$Companion_getInstance();
    if (typeParameterDeclarations === void 0) {
      typeParameterDeclarations = Kotlin.kotlin.collections.emptyList_287e2$();
    }
    this.defaultAnnotations = defaultAnnotations;
    this.declarations = declarations;
    this.typeAliases = typeAliases;
    this.typeParameterDeclarations = typeParameterDeclarations;
    this.cache = HashMap_init();
    var $receiver = this.cache;
    var value = new KtType('Any');
    $receiver.put_xwzc9p$('', value);
    var jsonTypeKey = trimIndent('\n                @nativeGetter\n                operator fun get(String): Any?\n                @nativeSetter\n                operator fun set(String, Any)\n\n                ');
    var $receiver_0 = this.cache;
    var value_0 = new KtType('Json');
    $receiver_0.put_xwzc9p$(jsonTypeKey, value_0);
  }
  function ObjectTypeToKotlinTypeMapperImpl$Companion() {
    ObjectTypeToKotlinTypeMapperImpl$Companion_instance = this;
    this.n_0 = 0;
  }
  ObjectTypeToKotlinTypeMapperImpl$Companion.prototype.reset = function () {
    this.n_0 = 0;
  };
  ObjectTypeToKotlinTypeMapperImpl$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ObjectTypeToKotlinTypeMapperImpl$Companion_instance = null;
  function ObjectTypeToKotlinTypeMapperImpl$Companion_getInstance() {
    if (ObjectTypeToKotlinTypeMapperImpl$Companion_instance === null) {
      new ObjectTypeToKotlinTypeMapperImpl$Companion();
    }
    return ObjectTypeToKotlinTypeMapperImpl$Companion_instance;
  }
  ObjectTypeToKotlinTypeMapperImpl.prototype.getKotlinTypeForObjectType_29gnwt$ = function (objectType) {
    var tmp$;
    var translator = new TsInterfaceToKt(this, this.defaultAnnotations, NOT_OVERRIDE, NOT_OVERRIDE);
    forEachChild_0(translator, objectType);
    var typeKey = this.toStringKey_geq3bk$(translator.declarations);
    var cachedTraitType = this.cache.get_11rb$(typeKey);
    if (cachedTraitType != null)
      return cachedTraitType;
    var $receiver = translator.declarations;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      var transform$result;
      if (Kotlin.isType(element, KtVariable)) {
        transform$result = listOf(element.type.type.name);
      }
       else if (Kotlin.isType(element, KtFunction)) {
        var $receiver_0 = element.callSignature.params;
        var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver_0, 10));
        var tmp$_1;
        tmp$_1 = $receiver_0.iterator();
        while (tmp$_1.hasNext()) {
          var item = tmp$_1.next();
          destination_0.add_11rb$(item.type.type.name);
        }
        transform$result = plus_0(destination_0, element.callSignature.returnType.type.name);
      }
       else {
        transform$result = emptyList();
      }
      var list = transform$result;
      Kotlin.kotlin.collections.addAll_ipc267$(destination, list);
    }
    var usedTypeParams = distinct(destination);
    var $receiver_1 = this.typeParameterDeclarations;
    var destination_1 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_2;
    tmp$_2 = $receiver_1.iterator();
    while (tmp$_2.hasNext()) {
      var element_0 = tmp$_2.next();
      if (usedTypeParams.contains_11rb$(element_0.name.text)) {
        destination_1.add_11rb$(element_0);
      }
    }
    var destination_2 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$(destination_1, 10));
    var tmp$_3;
    tmp$_3 = destination_1.iterator();
    while (tmp$_3.hasNext()) {
      var item_0 = tmp$_3.next();
      destination_2.add_11rb$(new KtTypeParam(item_0.name.text));
    }
    var typeParams = destination_2;
    var traitName = 'T' + '$' + (tmp$ = ObjectTypeToKotlinTypeMapperImpl$Companion_getInstance().n_0, ObjectTypeToKotlinTypeMapperImpl$Companion_getInstance().n_0 = tmp$ + 1 | 0, tmp$);
    var destination_3 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$(typeParams, 10));
    var tmp$_4;
    tmp$_4 = typeParams.iterator();
    while (tmp$_4.hasNext()) {
      var item_1 = tmp$_4.next();
      destination_3.add_11rb$(new KtType(item_1.name));
    }
    var traitType = new KtType(traitName, destination_3);
    translator.name = traitName;
    translator.typeParams = typeParams;
    this.declarations.add_11rb$(createClassifier(translator));
    this.cache.put_xwzc9p$(typeKey, traitType);
    return traitType;
  };
  function ObjectTypeToKotlinTypeMapperImpl$resolveUsingAliases$lambda(closure$referencedType, this$ObjectTypeToKotlinTypeMapperImpl) {
    return function (it) {
      return !Kotlin.equals(closure$referencedType.name, it.name) ? this$ObjectTypeToKotlinTypeMapperImpl.resolveUsingAliases_yasija$(it) : KtTypeUnion([it]);
    };
  }
  ObjectTypeToKotlinTypeMapperImpl.prototype.resolveUsingAliases_yasija$ = function (referencedType) {
    var $receiver = this.typeAliases;
    var firstOrNull_6jwkkr$result;
    firstOrNull_6jwkkr$break: do {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (Kotlin.equals(element.name, referencedType.name)) {
          firstOrNull_6jwkkr$result = element;
          break firstOrNull_6jwkkr$break;
        }
      }
      firstOrNull_6jwkkr$result = null;
    }
     while (false);
    var matchingTypeAlias = firstOrNull_6jwkkr$result;
    if (matchingTypeAlias != null) {
      var resolvedTypeUnion = this.replaceTypeParamsWithTypeArgs_0(referencedType, matchingTypeAlias, this.typeAliases);
      return this.flatMap_0(resolvedTypeUnion, ObjectTypeToKotlinTypeMapperImpl$resolveUsingAliases$lambda(referencedType, this));
    }
     else {
      if (!referencedType.typeArgs.isEmpty()) {
        var tmp$_0 = void 0;
        var $receiver_0 = referencedType.typeArgs;
        var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver_0, 10));
        var tmp$_1;
        tmp$_1 = $receiver_0.iterator();
        while (tmp$_1.hasNext()) {
          var item = tmp$_1.next();
          destination.add_11rb$(this.resolveUsingAliases_yasija$(item).singleType);
        }
        return KtTypeUnion([referencedType.copy_v60rl8$(tmp$_0, destination)]);
      }
       else {
        return KtTypeUnion([referencedType]);
      }
    }
  };
  function ObjectTypeToKotlinTypeMapperImpl$replaceTypeParamsWithTypeArgs$lambda(closure$replacements, closure$boundTypeAliases, this$ObjectTypeToKotlinTypeMapperImpl) {
    return function (it) {
      return this$ObjectTypeToKotlinTypeMapperImpl.resolveTypeArgs_0(it, plus(closure$replacements, closure$boundTypeAliases));
    };
  }
  ObjectTypeToKotlinTypeMapperImpl.prototype.replaceTypeParamsWithTypeArgs_0 = function (fromType, matchingTypeAlias, replacements) {
    var toTypeWithUnresolvedArgs = matchingTypeAlias.actualTypeUnionUsingAliasParams;
    var boundTypeAliases = this.getReplacementsForTypeParams_0(fromType, matchingTypeAlias);
    return this.map_0(toTypeWithUnresolvedArgs, ObjectTypeToKotlinTypeMapperImpl$replaceTypeParamsWithTypeArgs$lambda(replacements, boundTypeAliases, this));
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.flatMap_0 = function ($receiver, function_0) {
    var $receiver_0 = $receiver.possibleTypes;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = function_0(element).possibleTypes;
      Kotlin.kotlin.collections.addAll_ipc267$(destination, list);
    }
    return new KtTypeUnion_0(destination);
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.map_0 = function ($receiver, function_0) {
    var $receiver_0 = $receiver.possibleTypes;
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(function_0(item));
    }
    return new KtTypeUnion_0(destination);
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.resolveTypeArgs_0 = function (type, replacements) {
    if (!type.typeArgs.isEmpty()) {
      var aliasMapper = this.copy_ruxia7$(void 0, void 0, replacements);
      var tmp$ = void 0;
      var $receiver = type.typeArgs;
      var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver, 10));
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        destination.add_11rb$(aliasMapper.resolveUsingAliases_yasija$(item).singleType);
      }
      return type.copy_v60rl8$(tmp$, destination);
    }
     else {
      return type;
    }
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.getReplacementsForTypeParams_0 = function (fromType, matchingTypeAlias) {
    var tmp$, tmp$_0, tmp$_1;
    var tmp$_2;
    if ((tmp$_0 = (tmp$ = matchingTypeAlias.typeParams) != null ? zip(tmp$, fromType.typeArgs) : null) != null) {
      var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$(tmp$_0, 10));
      var tmp$_3;
      tmp$_3 = tmp$_0.iterator();
      while (tmp$_3.hasNext()) {
        var item = tmp$_3.next();
        destination.add_11rb$(KtTypeAlias_0(item.first.name, void 0, item.second));
      }
      tmp$_2 = destination;
    }
     else
      tmp$_2 = null;
    return (tmp$_1 = tmp$_2) != null ? tmp$_1 : emptyList();
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.withTypeParameters_le0eav$ = function (typeParameters) {
    var tmp$;
    return this.copy_ruxia7$(void 0, void 0, void 0, plus_1(toList_0(this.typeParameterDeclarations), (tmp$ = typeParameters != null ? typeParameters : null) != null ? tmp$ : []));
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.toStringKey_geq3bk$ = function ($receiver) {
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var tmp$_1 = stringify(item);
      var $receiver_0 = '(\\(|,\\s*)\\w+: ';
      tmp$_0.call(destination, Kotlin.kotlin.text.Regex_61zpoe$($receiver_0).replace_x2uqeu$(tmp$_1, '$1'));
    }
    return joinToString(sorted(destination), '');
  };
  ObjectTypeToKotlinTypeMapperImpl.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ObjectTypeToKotlinTypeMapperImpl',
    interfaces: [ObjectTypeToKotlinTypeMapper]
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.component1 = function () {
    return this.defaultAnnotations;
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.component2 = function () {
    return this.declarations;
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.component3 = function () {
    return this.typeAliases;
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.component4 = function () {
    return this.typeParameterDeclarations;
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.copy_ruxia7$ = function (defaultAnnotations, declarations, typeAliases, typeParameterDeclarations) {
    return new ObjectTypeToKotlinTypeMapperImpl(defaultAnnotations === void 0 ? this.defaultAnnotations : defaultAnnotations, declarations === void 0 ? this.declarations : declarations, typeAliases === void 0 ? this.typeAliases : typeAliases, typeParameterDeclarations === void 0 ? this.typeParameterDeclarations : typeParameterDeclarations);
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.toString = function () {
    return 'ObjectTypeToKotlinTypeMapperImpl(defaultAnnotations=' + Kotlin.toString(this.defaultAnnotations) + (', declarations=' + Kotlin.toString(this.declarations)) + (', typeAliases=' + Kotlin.toString(this.typeAliases)) + (', typeParameterDeclarations=' + Kotlin.toString(this.typeParameterDeclarations)) + ')';
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.defaultAnnotations) | 0;
    result = result * 31 + Kotlin.hashCode(this.declarations) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeAliases) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeParameterDeclarations) | 0;
    return result;
  };
  ObjectTypeToKotlinTypeMapperImpl.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.defaultAnnotations, other.defaultAnnotations) && Kotlin.equals(this.declarations, other.declarations) && Kotlin.equals(this.typeAliases, other.typeAliases) && Kotlin.equals(this.typeParameterDeclarations, other.typeParameterDeclarations)))));
  };
  function merge($receiver) {
    var destination = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var key = element.fqName;
      var tmp$_0;
      var value = destination.get_11rb$(key);
      if (value == null) {
        var answer = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
        destination.put_xwzc9p$(key, answer);
        tmp$_0 = answer;
      }
       else {
        tmp$_0 = value;
      }
      var list = tmp$_0;
      list.add_11rb$(element);
    }
    var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(destination.size);
    var tmp$_1;
    tmp$_1 = destination.entries.iterator();
    while (tmp$_1.hasNext()) {
      var item = tmp$_1.next();
      var tmp$_2 = destination_0.add_11rb$;
      var parts = item.value;
      var fqName = first(parts).fqName;
      var destination_1 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var tmp$_3;
      tmp$_3 = parts.iterator();
      while (tmp$_3.hasNext()) {
        var element_0 = tmp$_3.next();
        var list_0 = element_0.members;
        Kotlin.kotlin.collections.addAll_ipc267$(destination_1, list_0);
      }
      var members = destination_1;
      var destination_2 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var tmp$_4;
      tmp$_4 = parts.iterator();
      while (tmp$_4.hasNext()) {
        var element_1 = tmp$_4.next();
        var list_1 = element_1.annotations;
        Kotlin.kotlin.collections.addAll_ipc267$(destination_2, list_1);
      }
      var annotations = distinct(destination_2);
      var mergedMembers = mergeDeclarationsWithSameNameIfNeed(members);
      tmp$_2.call(destination_0, new KtPackagePart(fqName, mergedMembers, mergeAnnotations_0(annotations)));
    }
    return destination_0;
  }
  function mergeDeclarationsWithSameNameIfNeed$lambda(it) {
    return !Kotlin.isType(it, KtFunction);
  }
  function mergeDeclarationsWithSameNameIfNeed$lambda_0(a, b) {
    var tmp$;
    if (Kotlin.isType(a, KtClassifier)) {
      if (Kotlin.isType(b, KtClassifier))
        tmp$ = mergeClassifiers(a, b);
      else if (Kotlin.isType(b, KtVariable))
        tmp$ = mergeClassifierAndVariable(a, b);
      else {
        report('Merging ' + a.kind + ' and ??? unsupported yet, a: ' + stringify(a) + ', b: ' + stringify(b));
        tmp$ = null;
      }
    }
     else if (Kotlin.isType(a, KtVariable)) {
      if (Kotlin.isType(b, KtClassifier))
        tmp$ = mergeClassifierAndVariable(b, a);
      else {
        report('Merging Variable and ??? unsupported yet, a: ' + stringify(a) + ', b: ' + stringify(b));
        tmp$ = null;
      }
    }
     else {
      report('Unsupported types for merging, a: ' + stringify(a) + ', b: ' + stringify(b));
      tmp$ = null;
    }
    var result = tmp$;
    var tmp$_0;
    if (result != null) {
      result.annotations = mergeAnnotations(a.annotations, b.annotations);
      tmp$_0 = result;
    }
     else
      tmp$_0 = null;
    return tmp$_0;
  }
  function mergeDeclarationsWithSameNameIfNeed($receiver) {
    return merge_0($receiver, mergeDeclarationsWithSameNameIfNeed$lambda, COMPARE_BY_NAME, mergeDeclarationsWithSameNameIfNeed$lambda_0);
  }
  function mergeClassifiers(a, b) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = a.kind;
    if (Kotlin.equals(tmp$, KtClassKind$CLASS_getInstance())) {
      tmp$_0 = b.kind;
      if (Kotlin.equals(tmp$_0, KtClassKind$OBJECT_getInstance()))
        return mergeClassAndObject(a, b);
      else if (Kotlin.equals(tmp$_0, KtClassKind$INTERFACE_getInstance()))
        return mergeClassAndInterface(a, b);
    }
     else if (Kotlin.equals(tmp$, KtClassKind$INTERFACE_getInstance())) {
      tmp$_1 = b.kind;
      if (Kotlin.equals(tmp$_1, KtClassKind$OBJECT_getInstance()))
        return mergeClassAndObject(a, b);
      else if (Kotlin.equals(tmp$_1, KtClassKind$INTERFACE_getInstance()))
        return mergeClassifierMembers(a, [b]);
      else if (Kotlin.equals(tmp$_1, KtClassKind$CLASS_getInstance()))
        return mergeClassAndInterface(b, a);
    }
     else if (Kotlin.equals(tmp$, KtClassKind$OBJECT_getInstance())) {
      if (b.kind === KtClassKind$CLASS_getInstance() || b.kind === KtClassKind$INTERFACE_getInstance())
        return mergeClassAndObject(b, a);
      if (hasModuleAnnotation(a) && isModule(b))
        return mergeClassifierMembers(a, [b]);
    }
    report('Merging ' + a.kind + ' and ' + b.kind + ' unsupported yet, a: ' + stringify(a) + ', b: ' + stringify(b));
    return null;
  }
  function mergeClassAndInterface(klass, iface) {
    if (!Kotlin.equals(klass.typeParams, iface.typeParams)) {
      report("Can't merge classifiers with different type parameters -- klass: " + stringify(klass) + ', iface: ' + stringify(iface));
      return null;
    }
    var result = new KtClassifier(KtClassKind$CLASS_getInstance(), klass.name, klass.paramsOfConstructors, klass.typeParams, distinct(plus(klass.parents, iface.parents)), Kotlin.kotlin.collections.ArrayList_init_ww73n8$(), Kotlin.kotlin.collections.ArrayList_init_ww73n8$(), klass.hasOpenModifier);
    return mergeClassifierMembers(result, [klass, iface]);
  }
  function mergeClassifierAndVariable(a, b) {
    if (a.members.isEmpty())
      return b;
    assert(getClassObject(a) == null, 'Unxpected `class object` when merge Classifier(kind=' + a.kind + ') and Variable(' + stringify(b) + ')');
    if (a.kind === KtClassKind$INTERFACE_getInstance() || isModule(a)) {
      var newTrait = new KtClassifier(KtClassKind$INTERFACE_getInstance(), a.name, a.paramsOfConstructors, a.typeParams, a.parents, a.members, a.annotations, false);
      var varTypeName = stringify(b.type.type);
      var delegation = listOf(new KtHeritageType(varTypeName + ' by ' + NO_IMPL + ': ' + varTypeName));
      var classObject = new KtClassifier(KtClassKind$COMPANION_OBJECT_getInstance(), '', Kotlin.kotlin.collections.emptyList_287e2$(), Kotlin.kotlin.collections.emptyList_287e2$(), delegation, Kotlin.kotlin.collections.emptyList_287e2$(), Kotlin.kotlin.collections.emptyList_287e2$(), false);
      addMember(newTrait, classObject);
      return newTrait;
    }
    report('Merging non-empty Classifier(kind=' + a.kind + ') and Variable unsupported yet, a: ' + stringify(a) + ', b: ' + stringify(b));
    return null;
  }
  function mergeAnnotations(a, b) {
    if (a.isEmpty())
      return b;
    else if (b.isEmpty())
      return a;
    else
      return mergeAnnotations_0(plus(a, b));
  }
  function mergeAnnotations$lambda(it) {
    return true;
  }
  function mergeAnnotations$lambda_0(a, b) {
    if (a.parameters.isEmpty())
      return b;
    else if (b.parameters.isEmpty())
      return a;
    else if (Kotlin.equals(a.parameters, b.parameters))
      return a;
    else {
      report('Merging annotations with different arguments unsupported yet, a: ' + stringify(a) + ', b: ' + stringify(b));
      return null;
    }
  }
  function mergeAnnotations_0(annotations) {
    return merge_0(annotations, mergeAnnotations$lambda, COMPARE_BY_NAME, mergeAnnotations$lambda_0);
  }
  function mergeClassAndObject(a, b) {
    var classObject = getClassObject(a);
    if (classObject == null) {
      addMember(a, new KtClassifier(KtClassKind$COMPANION_OBJECT_getInstance(), '', Kotlin.kotlin.collections.emptyList_287e2$(), Kotlin.kotlin.collections.emptyList_287e2$(), Kotlin.kotlin.collections.emptyList_287e2$(), b.members, NO_ANNOTATIONS, false));
    }
     else {
      addMembersFrom(classObject, b);
    }
    return a;
  }
  function mergeClassifierMembers(a, other) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== other.length; ++tmp$) {
      var b = other[tmp$];
      addMembersFrom(a, b);
    }
    return a;
  }
  function addMembersFrom($receiver, another) {
    var tmp$;
    var members = Kotlin.isType(tmp$ = $receiver.members, MutableList) ? tmp$ : Kotlin.throwCCE();
    members.addAll_brywnq$(another.members);
    mergeDeclarationsWithSameNameIfNeed(members);
  }
  function addMember($receiver, member) {
    var tmp$;
    (Kotlin.isType(tmp$ = $receiver.members, MutableList) ? tmp$ : Kotlin.throwCCE()).add_11rb$(member);
  }
  var get_declarationName = Kotlin.defineInlineFunction('ts2kt.typescript.get_declarationName_jhg893$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_snzh8q$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_0 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_5s6jds$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_nwtuk7$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_0 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_ih1unk$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_1 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_prku36$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_2 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_1v1vnl$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_3 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_i42fc9$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_1 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_gcxvwa$', function ($receiver) {
    return $receiver.name;
  });
  var get_declarationName_0 = Kotlin.defineInlineFunction('ts2kt.typescript.get_declarationName_czbci4$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_4 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_7v1fh7$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_2 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_x5rxe7$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_5 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_jnf2ws$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_6 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_va8bie$', function ($receiver) {
    return $receiver.name;
  });
  var set_propertyName = Kotlin.defineInlineFunction('ts2kt.typescript.set_propertyName_uy9yq9$', function ($receiver, v) {
    $receiver.name = v;
  });
  var get_propertyName_7 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_68a97k$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_3 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_jlyuxx$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_4 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_j6kl1i$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_5 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_uulvm1$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_6 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_p0tzpc$', function ($receiver) {
    return $receiver.name;
  });
  var set_identifierName = Kotlin.defineInlineFunction('ts2kt.typescript.set_identifierName_x4zda$', function ($receiver, v) {
    $receiver.name = v;
  });
  var get_identifierName_7 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_a9aw95$', function ($receiver) {
    return $receiver.name;
  });
  var set_identifierName_0 = Kotlin.defineInlineFunction('ts2kt.typescript.set_identifierName_2zh5fb$', function ($receiver, v) {
    $receiver.name = v;
  });
  var get_propertyName_8 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_q9hz09$', function ($receiver) {
    return $receiver.name;
  });
  var get_propertyName_9 = Kotlin.defineInlineFunction('ts2kt.typescript.get_propertyName_rgranj$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_8 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_d15va$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_9 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_ewxmrr$', function ($receiver) {
    return $receiver.name;
  });
  var set_identifierName_1 = Kotlin.defineInlineFunction('ts2kt.typescript.set_identifierName_eya9g$', function ($receiver, v) {
    $receiver.name = v;
  });
  var get_declarationName_1 = Kotlin.defineInlineFunction('ts2kt.typescript.get_declarationName_w16434$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_10 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_rferdy$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_11 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_23mu59$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_12 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_8phqdc$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_13 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_fs3q0n$', function ($receiver) {
    return $receiver.name;
  });
  var set_identifierName_2 = Kotlin.defineInlineFunction('ts2kt.typescript.set_identifierName_9rwuhn$', function ($receiver, v) {
    $receiver.name = v;
  });
  var get_identifierName_14 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_rlpjmb$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_15 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_287i12$', function ($receiver) {
    return $receiver.name;
  });
  var get_identifierName_16 = Kotlin.defineInlineFunction('ts2kt.typescript.get_identifierName_lob3gp$', function ($receiver) {
    return $receiver.name;
  });
  function DiagnosticLevel(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function DiagnosticLevel_initFields() {
    DiagnosticLevel_initFields = function () {
    };
    DiagnosticLevel$EXCEPTION_instance = new DiagnosticLevel('EXCEPTION', 0);
    DiagnosticLevel$WARNING_WITH_STACKTRACE_instance = new DiagnosticLevel('WARNING_WITH_STACKTRACE', 1);
    DiagnosticLevel$WARNING_instance = new DiagnosticLevel('WARNING', 2);
    DiagnosticLevel$QUIET_instance = new DiagnosticLevel('QUIET', 3);
    DiagnosticLevel$Companion_getInstance();
  }
  var DiagnosticLevel$EXCEPTION_instance;
  function DiagnosticLevel$EXCEPTION_getInstance() {
    DiagnosticLevel_initFields();
    return DiagnosticLevel$EXCEPTION_instance;
  }
  var DiagnosticLevel$WARNING_WITH_STACKTRACE_instance;
  function DiagnosticLevel$WARNING_WITH_STACKTRACE_getInstance() {
    DiagnosticLevel_initFields();
    return DiagnosticLevel$WARNING_WITH_STACKTRACE_instance;
  }
  var DiagnosticLevel$WARNING_instance;
  function DiagnosticLevel$WARNING_getInstance() {
    DiagnosticLevel_initFields();
    return DiagnosticLevel$WARNING_instance;
  }
  var DiagnosticLevel$QUIET_instance;
  function DiagnosticLevel$QUIET_getInstance() {
    DiagnosticLevel_initFields();
    return DiagnosticLevel$QUIET_instance;
  }
  function DiagnosticLevel$Companion() {
    DiagnosticLevel$Companion_instance = this;
    this.DEFAULT = DiagnosticLevel$WARNING_getInstance();
  }
  DiagnosticLevel$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var DiagnosticLevel$Companion_instance = null;
  function DiagnosticLevel$Companion_getInstance() {
    DiagnosticLevel_initFields();
    if (DiagnosticLevel$Companion_instance === null) {
      new DiagnosticLevel$Companion();
    }
    return DiagnosticLevel$Companion_instance;
  }
  DiagnosticLevel.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'DiagnosticLevel',
    interfaces: [Enum]
  };
  function DiagnosticLevel$values() {
    return [DiagnosticLevel$EXCEPTION_getInstance(), DiagnosticLevel$WARNING_WITH_STACKTRACE_getInstance(), DiagnosticLevel$WARNING_getInstance(), DiagnosticLevel$QUIET_getInstance()];
  }
  DiagnosticLevel.values = DiagnosticLevel$values;
  function DiagnosticLevel$valueOf(name) {
    switch (name) {
      case 'EXCEPTION':
        return DiagnosticLevel$EXCEPTION_getInstance();
      case 'WARNING_WITH_STACKTRACE':
        return DiagnosticLevel$WARNING_WITH_STACKTRACE_getInstance();
      case 'WARNING':
        return DiagnosticLevel$WARNING_getInstance();
      case 'QUIET':
        return DiagnosticLevel$QUIET_getInstance();
      default:Kotlin.throwISE('No enum constant ts2kt.utils.DiagnosticLevel.' + name);
    }
  }
  DiagnosticLevel.valueOf_61zpoe$ = DiagnosticLevel$valueOf;
  var diagnosticLevel;
  function report(message) {
    var tmp$;
    tmp$ = diagnosticLevel;
    if (Kotlin.equals(tmp$, DiagnosticLevel$EXCEPTION_getInstance()))
      throw new IllegalStateException(message);
    else if (Kotlin.equals(tmp$, DiagnosticLevel$WARNING_WITH_STACKTRACE_getInstance())) {
      console.warn('ts2kt: ' + message);
      console.warn('Stacktrace:' + Kotlin.toString((new Exception()).stack));
      return message;
    }
     else if (Kotlin.equals(tmp$, DiagnosticLevel$WARNING_getInstance())) {
      console.warn('ts2kt: ' + message);
      return message;
    }
     else if (Kotlin.equals(tmp$, DiagnosticLevel$QUIET_getInstance()))
      return null;
    else
      return Kotlin.noWhenBranchMatched();
  }
  function assert(condition, message) {
    if (!condition)
      report(message);
  }
  function reportUnsupportedNode(node) {
    reportUnsupportedNodeAndGetMessage(node);
    return null;
  }
  var trackUnsupportedKinds;
  var unsupportedKinds;
  function reportUnsupportedNodeAndGetMessage(node) {
    var tmp$;
    if (trackUnsupportedKinds) {
      var $receiver = unsupportedKinds;
      var key = node.kind;
      var value = ((tmp$ = unsupportedKinds.get_11rb$(node.kind)) != null ? tmp$ : 0) + 1 | 0;
      $receiver.put_xwzc9p$(key, value);
    }
    var $receiver_0 = node.kind;
    return report('"' + Kotlin.kotlin.js.get_js_1yb8b7$(Kotlin.getKClass(_.$$importsForInline$$.typescript.SyntaxKind))[$receiver_0] + '"' + ' kind unsupported yet here! (' + location(node) + ')');
  }
  function reportUnsupportedKinds$lambda(it) {
    return it.second;
  }
  function reportUnsupportedKinds() {
    if (!trackUnsupportedKinds) {
      console.warn('Tracking unsupported node kinds is disabled');
      return;
    }
    console.warn('Unsupported node kinds (' + unsupportedKinds.size + '):');
    console.warn('count\t\tname(id)');
    var $receiver = toList_1(unsupportedKinds);
    var tmp$;
    tmp$ = Kotlin.kotlin.collections.sortedWith_eknfly$($receiver, new Kotlin.kotlin.Comparator_x4fedy$$f(Kotlin.kotlin.comparisons.compareByDescending$f(reportUnsupportedKinds$lambda))).iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0 = console;
      var tmp$_1 = element.second.toString() + '\t' + '\t';
      var $receiver_0 = element.first;
      tmp$_0.warn(tmp$_1 + Kotlin.kotlin.js.get_js_1yb8b7$(Kotlin.getKClass(_.$$importsForInline$$.typescript.SyntaxKind))[$receiver_0] + ' (' + element.first + ')');
    }
  }
  var KOTLIN_FILE_EXT;
  function translateToFile$lambda(closure$srcName) {
    return function (it) {
      return stringify_0(it, closure$srcName);
    };
  }
  function translateToFile(srcPath, outPath) {
    var tmp$;
    var packageParts = translate(srcPath);
    var srcName = $module$path.basename(srcPath, TYPESCRIPT_DEFINITION_FILE_EXT);
    if (!packageParts.isEmpty()) {
      tmp$ = joinToString(packageParts, '\n' + '// ' + repeat('-', 90) + '\n', void 0, void 0, void 0, void 0, translateToFile$lambda(srcName));
    }
     else
      tmp$ = '// NO DECLARATIONS';
    var out = tmp$;
    $module$fs.writeFileSync(outPath, out);
  }
  function translateToDir(sources, outDir, libraries) {
    if (libraries === void 0)
      libraries = emptyList();
    var tmp$;
    tmp$ = sources.iterator();
    while (tmp$.hasNext()) {
      var src = tmp$.next();
      console.log('Converting ' + src);
      var packageParts = translate(src);
      var baseSrcName = $module$path.basename(src, TYPESCRIPT_DEFINITION_FILE_EXT);
      if (packageParts.isEmpty()) {
        console.log('Nothing was converted');
        continue;
      }
      console.log('Save declarations:');
      var tmp$_0;
      tmp$_0 = packageParts.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        var outFileName = baseSrcName + (!element.fqName.isEmpty() ? '.' : '') + joinToString(element.fqName, '.') + KOTLIN_FILE_EXT;
        var outFilePath = outDir + '/' + outFileName;
        console.log('\t' + outFilePath);
        var imports = listOf_0(['kotlin.js.*', 'kotlin.js.Json', 'org.khronos.webgl.*', 'org.w3c.dom.*', 'org.w3c.dom.events.*', 'org.w3c.dom.parsing.*', 'org.w3c.dom.svg.*', 'org.w3c.dom.url.*', 'org.w3c.fetch.*', 'org.w3c.files.*', 'org.w3c.notifications.*', 'org.w3c.performance.*', 'org.w3c.workers.*', 'org.w3c.xhr.*']);
        var suppressedDiagnostics = listOf_0(['INTERFACE_WITH_SUPERCLASS', 'OVERRIDING_FINAL_MEMBER', 'RETURN_TYPE_MISMATCH_ON_OVERRIDE', 'CONFLICTING_OVERLOADS']);
        $module$fs.writeFileSync(outFilePath, stringify_0(element, null, true, imports, suppressedDiagnostics));
      }
    }
  }
  function CliArguments(sources, outDir, libraries) {
    this.sources = sources;
    this.outDir = outDir;
    this.libraries = libraries;
  }
  CliArguments.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CliArguments',
    interfaces: []
  };
  CliArguments.prototype.component1 = function () {
    return this.sources;
  };
  CliArguments.prototype.component2 = function () {
    return this.outDir;
  };
  CliArguments.prototype.component3 = function () {
    return this.libraries;
  };
  CliArguments.prototype.copy_kmsbck$ = function (sources, outDir, libraries) {
    return new CliArguments(sources === void 0 ? this.sources : sources, outDir === void 0 ? this.outDir : outDir, libraries === void 0 ? this.libraries : libraries);
  };
  CliArguments.prototype.toString = function () {
    return 'CliArguments(sources=' + Kotlin.toString(this.sources) + (', outDir=' + Kotlin.toString(this.outDir)) + (', libraries=' + Kotlin.toString(this.libraries)) + ')';
  };
  CliArguments.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.sources) | 0;
    result = result * 31 + Kotlin.hashCode(this.outDir) | 0;
    result = result * 31 + Kotlin.hashCode(this.libraries) | 0;
    return result;
  };
  CliArguments.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.sources, other.sources) && Kotlin.equals(this.outDir, other.outDir) && Kotlin.equals(this.libraries, other.libraries)))));
  };
  function printUsage(program) {
    console.log(trimIndent('\n' + '                Usage: ' + program + ' [<options>] <d.ts files>' + '\n' + '                where possible options include:' + '\n' + '                    -d <path>                   Destination directory for files with converted declarations,' + '\n' + '                                                current directory is used by default' + '\n' + '                    -h                          Print a synopsis of standard options' + '\n' + '                    -v, -version                Print version' + '\n' + '                    -X                          Print a synopsis of advanced options' + '\n' + '                '));
  }
  function parseArguments$readArg($receiver) {
    if (!$receiver.hasNext())
      return null;
    var v = $receiver.next();
    if (startsWith(v, '-'))
      return null;
    return v;
  }
  function parseArguments$printVersion(closure$program) {
    return function () {
      var version = require('./package.json').version;
      console.log(closure$program + ' version: ' + version);
    };
  }
  function parseArguments() {
    var readArg = parseArguments$readArg;
    var program = 'ts2kt';
    var printVersion = parseArguments$printVersion(program);
    var args = drop($module$process.argv, 2);
    if (args.isEmpty()) {
      printUsage(program);
      return null;
    }
    var it = args.iterator();
    var other = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var destination = null;
    while (it.hasNext()) {
      var arg = it.next();
      if (Kotlin.equals(arg, '-h')) {
        printUsage(program);
        return null;
      }
       else if (Kotlin.equals(arg, '-d')) {
        var p = readArg(it);
        if (p == null) {
          console.error("'-d' should be followed by path to destination directory");
          return null;
        }
        destination = p;
      }
       else if (Kotlin.equals(arg, '-l')) {
        console.error("'-l' not supported yet");
        return null;
      }
       else if (Kotlin.equals(arg, '-v') || Kotlin.equals(arg, '-version')) {
        printVersion();
        return null;
      }
       else if (Kotlin.equals(arg, '-X')) {
        console.log(trimIndent('\n' + '                            Usage: ' + program + ' <options> <d.ts files>' + '\n' + '                            where possible options include:' + '\n' + '                                -Xdiagnostic-level <level>  How report diagnostics, ' + DiagnosticLevel$Companion_getInstance().DEFAULT + ' by default,' + '\n' + '                                        where level can be any of {' + joinToString_0(DiagnosticLevel$values()) + '}' + '\n' + '                                -Xtrack-unsupported-kinds   Enable tracking unsupported node kinds and print statistic at the finish' + '\n' + '                            '));
        return null;
      }
       else if (Kotlin.equals(arg, '-Xdiagnostic-level')) {
        var p_0 = readArg(it);
        var level = p_0 != null ? DiagnosticLevel$valueOf(p_0) : null;
        if (level == null) {
          console.error("'-Xdiagnostic-level' should be followed by one of " + joinToString_0(DiagnosticLevel$values()));
          return null;
        }
        diagnosticLevel = level;
      }
       else if (Kotlin.equals(arg, '-Xtrack-unsupported-kinds'))
        trackUnsupportedKinds = true;
      else {
        other.add_11rb$(arg);
      }
    }
    var tmp$;
    var first = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var second = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    tmp$ = other.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (startsWith(element, '-')) {
        first.add_11rb$(element);
      }
       else {
        second.add_11rb$(element);
      }
    }
    var tmp$_0 = new Kotlin.kotlin.Pair(first, second);
    var allSources = tmp$_0.component2();
    var destination_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_1;
    tmp$_1 = allSources.iterator();
    while (tmp$_1.hasNext()) {
      var element_0 = tmp$_1.next();
      if (endsWith(element_0, TYPESCRIPT_DEFINITION_FILE_EXT)) {
        destination_0.add_11rb$(element_0);
      }
    }
    var sources = destination_0;
    printVersion();
    if (sources.size !== allSources.size) {
      console.error('ts2kt supports to convert only TypeScript definition files (d.ts)');
      return null;
    }
    if (sources.isEmpty()) {
      console.error('No files to convert');
      return null;
    }
    return new CliArguments(sources, destination != null ? destination : '.', emptyList());
  }
  function main(args) {
    var tmp$;
    if (module.parent != null)
      return;
    tmp$ = parseArguments();
    if (tmp$ == null) {
      return;
    }
    var tmp$_0 = tmp$;
    var sources = tmp$_0.component1()
    , destination = tmp$_0.component2()
    , libraries = tmp$_0.component3();
    translateToDir(sources, destination, libraries);
    if (trackUnsupportedKinds) {
      reportUnsupportedKinds();
    }
  }
  var TYPESCRIPT_DEFINITION_FILE_EXT;
  var PATH_TO_LIB_D_TS;
  var file2scriptSnapshotCache;
  function getScriptSnapshotFromFile(path) {
    var scriptSnapshot = file2scriptSnapshotCache.get_11rb$(path);
    if (scriptSnapshot == null) {
      scriptSnapshot = fromString($module$fs.readFileSync(path).toString());
      var $receiver = file2scriptSnapshotCache;
      var value = scriptSnapshot;
      $receiver.put_xwzc9p$(path, value);
    }
    return scriptSnapshot;
  }
  var LIB_D_TS_WITH_SNAPSHOT;
  var host;
  var documentRegistry;
  var languageService;
  function translate$isOverrideHelper$forEachBaseTypeNode(closure$typechecker, closure$visited, closure$f, closure$nodeName) {
    return function closure$forEachBaseTypeNode($receiver) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
      tmp$ = $receiver.heritageClauses;
      if (tmp$ == null) {
        return false;
      }
      var heritages = tmp$;
      for (tmp$_0 = 0; tmp$_0 !== heritages.length; ++tmp$_0) {
        var heritage = heritages[tmp$_0];
        tmp$_1 = heritage.types;
        if (tmp$_1 == null) {
          continue;
        }
        var types = tmp$_1;
        for (tmp$_2 = 0; tmp$_2 !== types.length; ++tmp$_2) {
          var typeNode = types[tmp$_2];
          tmp$_3 = closure$typechecker.getTypeAtLocation(typeNode);
          if (tmp$_3 == null) {
            continue;
          }
          var type = tmp$_3;
          if (!closure$visited.add_11rb$(type))
            continue;
          if (closure$f(closure$typechecker, type, closure$nodeName))
            return true;
          if ((tmp$_8 = (tmp$_7 = Kotlin.isType(tmp$_6 = (tmp$_5 = (tmp$_4 = type.symbol) != null ? tmp$_4.declarations : null) != null ? tmp$_5[0] : null, Object) ? tmp$_6 : null) != null ? closure$forEachBaseTypeNode(tmp$_7) : null) != null ? tmp$_8 : false)
            return true;
        }
      }
      return false;
    };
  }
  function translate$isSubtypeOf($receiver, other) {
    var tmp$, tmp$_0;
    if (Kotlin.equals($receiver, other))
      return true;
    if ((other.flags & TypeFlags$Any) !== 0)
      return true;
    var tmp$_1;
    if ((tmp$ = $receiver.getBaseTypes()) != null) {
      var any$result;
      any$break: do {
        var tmp$_2;
        for (tmp$_2 = 0; tmp$_2 !== tmp$.length; ++tmp$_2) {
          var element = tmp$[tmp$_2];
          if (translate$isSubtypeOf(element, other)) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      tmp$_1 = any$result;
    }
     else
      tmp$_1 = null;
    return (tmp$_0 = tmp$_1) != null ? tmp$_0 : false;
  }
  function translate$getTypeOfSymbol($receiver, symbol) {
    return $receiver.getTypeOfSymbolAtLocation(symbol, symbol.valueDeclaration);
  }
  function translate$isOverride(closure$getTypeOfSymbol) {
    return function ($receiver, candidate, other) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (candidate.parameters.length !== other.parameters.length)
        return false;
      tmp$ = get_indices_0(candidate.parameters);
      tmp$_0 = tmp$.first;
      tmp$_1 = tmp$.last;
      tmp$_2 = tmp$.step;
      for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
        var candidateType = closure$getTypeOfSymbol($receiver, candidate.parameters[i]);
        var otherType = closure$getTypeOfSymbol($receiver, other.parameters[i]);
        if (!Kotlin.equals(candidateType, otherType))
          return false;
      }
      return true;
    };
  }
  function translate$isOverride$lambda(closure$nodeSignature, closure$node, closure$isOverride) {
    return function (typechecker, type, nodeName) {
      var tmp$, tmp$_0, tmp$_1;
      closure$nodeSignature.v = (tmp$ = closure$nodeSignature.v) != null ? tmp$ : typechecker.getSignatureFromDeclaration(closure$node);
      var candidates = typechecker.getPropertyOfType(type, nodeName);
      var tmp$_2;
      if ((tmp$_0 = candidates != null ? candidates.declarations : null) != null) {
        var any$result;
        any$break: do {
          var tmp$_3;
          for (tmp$_3 = 0; tmp$_3 !== tmp$_0.length; ++tmp$_3) {
            var element = tmp$_0[tmp$_3];
            var closure$nodeSignature_0 = closure$nodeSignature;
            var closure$isOverride_0 = closure$isOverride;
            var predicate$result;
            predicate$break: do {
              var tmp$_4, tmp$_5, tmp$_6;
              if (element.kind === SyntaxKind$PropertyDeclaration || element.kind === SyntaxKind$PropertySignature) {
                predicate$result = false;
                break predicate$break;
              }
              tmp$_4 = element.kind;
              if (Kotlin.equals(tmp$_4, SyntaxKind$MethodSignature) || Kotlin.equals(tmp$_4, SyntaxKind$MethodDeclaration)) {
                tmp$_5 = typechecker.getSignatureFromDeclaration(element);
              }
               else {
                reportUnsupportedNode(element);
                predicate$result = false;
                break predicate$break;
              }
              var signature = tmp$_5;
              predicate$result = closure$isOverride_0(typechecker, (tmp$_6 = closure$nodeSignature_0.v) != null ? tmp$_6 : Kotlin.throwNPE(), signature);
            }
             while (false);
            if (predicate$result) {
              any$result = true;
              break any$break;
            }
          }
          any$result = false;
        }
         while (false);
        tmp$_2 = any$result;
      }
       else
        tmp$_2 = null;
      return (tmp$_1 = tmp$_2) != null ? tmp$_1 : false;
    };
  }
  function translate$isOverride_0(closure$isOverride) {
    return function (node) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      var params = node.parameters;
      tmp$_0 = (tmp$ = node.name) != null ? tmp$.text : null;
      if (Kotlin.equals(tmp$_0, 'equals')) {
        var tmp$_4 = params.length === 1;
        if (tmp$_4) {
          tmp$_4 = (tmp$_2 = (tmp$_1 = params[0].type) != null ? tmp$_1.kind === SyntaxKind$AnyKeyword : null) != null ? tmp$_2 : true;
        }
        tmp$_3 = tmp$_4;
      }
       else if (Kotlin.equals(tmp$_0, 'hashCode') || Kotlin.equals(tmp$_0, 'toString'))
        tmp$_3 = params.length === 0;
      else
        tmp$_3 = false;
      if (tmp$_3)
        return true;
      var nodeSignature = {v: null};
      var f = translate$isOverride$lambda(nodeSignature, node, closure$isOverride);
      var closure$isOverrideHelper$result;
      closure$isOverrideHelper$break: do {
        var tmp$_5, tmp$_6;
        var parentNode = (tmp$_5 = node.parent) != null ? tmp$_5 : Kotlin.throwNPE();
        if (parentNode.heritageClauses == null) {
          closure$isOverrideHelper$result = false;
          break closure$isOverrideHelper$break;
        }
        var typechecker = languageService.getProgram().getTypeChecker();
        var nodeName = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$_6 = node.name) != null ? tmp$_6 : Kotlin.throwNPE()).text);
        var visited = Kotlin.kotlin.collections.HashSet_init_287e2$();
        var forEachBaseTypeNode = translate$isOverrideHelper$forEachBaseTypeNode(typechecker, visited, f, nodeName);
        closure$isOverrideHelper$result = forEachBaseTypeNode(parentNode);
      }
       while (false);
      return closure$isOverrideHelper$result;
    };
  }
  function translate$isOverrideProperty$lambda(typechecker, type, nodeName) {
    return typechecker.getPropertyOfType(type, nodeName) != null;
  }
  function translate$isOverrideProperty() {
    return function (node) {
      var closure$isOverrideHelper$result;
      closure$isOverrideHelper$break: do {
        var tmp$, tmp$_0;
        var parentNode = (tmp$ = node.parent) != null ? tmp$ : Kotlin.throwNPE();
        if (parentNode.heritageClauses == null) {
          closure$isOverrideHelper$result = false;
          break closure$isOverrideHelper$break;
        }
        var typechecker = languageService.getProgram().getTypeChecker();
        var nodeName = _.$$importsForInline$$.typescript.unescapeIdentifier(((tmp$_0 = node.name) != null ? tmp$_0 : Kotlin.throwNPE()).text);
        var visited = Kotlin.kotlin.collections.HashSet_init_287e2$();
        var forEachBaseTypeNode = translate$isOverrideHelper$forEachBaseTypeNode(typechecker, visited, translate$isOverrideProperty$lambda, nodeName);
        closure$isOverrideHelper$result = forEachBaseTypeNode(parentNode);
      }
       while (false);
      return closure$isOverrideHelper$result;
    };
  }
  function translate$lambda(closure$normalizeSrcPath) {
    return function (it) {
      var definitions = languageService.getDefinitionAtPosition(closure$normalizeSrcPath, it.end);
      var all$result;
      all$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== definitions.length; ++tmp$) {
          var element = definitions[tmp$];
          var closure$normalizeSrcPath_0 = closure$normalizeSrcPath;
          if (!Kotlin.equals(element.fileName, closure$normalizeSrcPath_0)) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      return all$result;
    };
  }
  function translate(srcPath) {
    var tmp$, tmp$_0;
    var normalizeSrcPath = normalizePath(srcPath);
    var file2scriptSnapshot = hashMapOf([LIB_D_TS_WITH_SNAPSHOT, to(normalizeSrcPath, getScriptSnapshotFromFile(normalizeSrcPath))]);
    var filesToProcess = [normalizeSrcPath];
    while (!(filesToProcess.length === 0)) {
      var curFile = filesToProcess.shift();
      var curDir = getDirectoryPath(curFile) + '/';
      var result = preProcessFile(((tmp$ = file2scriptSnapshot.get_11rb$(curFile)) != null ? tmp$ : Kotlin.throwNPE()).getText());
      var referencedFiles = result.referencedFiles;
      for (tmp$_0 = 0; tmp$_0 !== referencedFiles.length; ++tmp$_0) {
        var referencedFile = referencedFiles[tmp$_0];
        var referencedFilePath = normalizePath(curDir + referencedFile.fileName);
        var tmp$_1;
        if ((Kotlin.isType(tmp$_1 = file2scriptSnapshot, Kotlin.kotlin.collections.Map) ? tmp$_1 : Kotlin.throwCCE()).containsKey_11rb$(referencedFilePath))
          continue;
        filesToProcess.push(referencedFilePath);
        var value = getScriptSnapshotFromFile(referencedFilePath);
        file2scriptSnapshot.put_xwzc9p$(referencedFilePath, value);
      }
    }
    host.file2scriptSnapshot = file2scriptSnapshot;
    host.currentDirectory = getDirectoryPath(normalizeSrcPath);
    var fileNode = languageService.getProgram().getSourceFile(normalizeSrcPath);
    var isSubtypeOf = translate$isSubtypeOf;
    var getTypeOfSymbol = translate$getTypeOfSymbol;
    var isOverride = translate$isOverride(getTypeOfSymbol);
    var isOverride_0 = translate$isOverride_0(isOverride);
    var isOverrideProperty = translate$isOverrideProperty();
    ObjectTypeToKotlinTypeMapperImpl$Companion_getInstance().reset();
    var typeScriptToKotlin = new TypeScriptToKotlin(void 0, void 0, void 0, void 0, void 0, translate$lambda(normalizeSrcPath), Kotlin.getCallableRef('isOverride', function (node) {
      return isOverride_0(node);
    }), Kotlin.getCallableRef('isOverrideProperty', function (node) {
      return isOverrideProperty(node);
    }));
    typeScriptToKotlin.visitList_uvf806$(fileNode);
    var packageParts = typeScriptToKotlin.packageParts;
    var $receiver = merge(packageParts);
    var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
    var tmp$_2;
    tmp$_2 = $receiver.iterator();
    while (tmp$_2.hasNext()) {
      var element = tmp$_2.next();
      var $receiver_0 = element.members;
      var predicate = isNotAnnotatedAsFake;
      var any$result;
      any$break: do {
        var tmp$_3;
        tmp$_3 = $receiver_0.iterator();
        while (tmp$_3.hasNext()) {
          var element_0 = tmp$_3.next();
          if (predicate(element_0)) {
            any$result = true;
            break any$break;
          }
        }
        any$result = false;
      }
       while (false);
      if (any$result) {
        destination.add_11rb$(element);
      }
    }
    var mergedPackageParts = destination;
    return mergedPackageParts;
  }
  var cast = Kotlin.defineInlineFunction('ts2kt.ts2kt.utils.cast_3752g7$', function ($receiver) {
    return $receiver;
  });
  function join($receiver, delimiter, start, end, startWithIfNotEmpty, endWithIfNotEmpty, filter, stringify) {
    if (delimiter === void 0)
      delimiter = ', ';
    if (start === void 0)
      start = '';
    if (end === void 0)
      end = '';
    if (startWithIfNotEmpty === void 0)
      startWithIfNotEmpty = '';
    if (endWithIfNotEmpty === void 0)
      endWithIfNotEmpty = '';
    if (filter === void 0)
      filter = null;
    if (stringify === void 0)
      stringify = null;
    var tmp$;
    if ($receiver.isEmpty())
      return start + end;
    var s = '';
    var first = true;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var e = tmp$.next();
      if (filter != null && !filter(e))
        continue;
      if (!first) {
        s += delimiter;
      }
       else {
        first = false;
      }
      s += stringify == null ? Kotlin.toString(e) : stringify(e);
    }
    if (first)
      return start + end;
    return start + startWithIfNotEmpty + s + endWithIfNotEmpty + end;
  }
  function merge_0($receiver, acceptor, comparator, merger) {
    var $receiver_0 = toMutableList($receiver);
    merge_1($receiver_0, acceptor, comparator, merger);
    return $receiver_0;
  }
  function merge_1($receiver, acceptor, comparator, merger) {
    var i = 0;
    while (i < $receiver.size) {
      var current = $receiver.get_za3lpa$(i);
      if (!acceptor(current)) {
        i = i + 1 | 0;
        continue;
      }
      var candidates = Kotlin.kotlin.collections.ArrayList_init_ww73n8$();
      var size = $receiver.size;
      var j = i + 1 | 0;
      while (j < size) {
        var e = $receiver.get_za3lpa$(j);
        if (!acceptor(e)) {
          j = j + 1 | 0;
          continue;
        }
        if (comparator(current, e)) {
          candidates.add_11rb$(j);
        }
        j = j + 1 | 0;
      }
      if (!candidates.isEmpty()) {
        mergeAllTo($receiver, i, candidates, merger);
      }
      i = i + 1 | 0;
    }
  }
  function mergeAllTo($receiver, mergeTo, candidateIndexes, merger) {
    var tmp$;
    var acc = $receiver.get_za3lpa$(mergeTo);
    var indexesToRemove = Kotlin.kotlin.collections.LinkedHashSet_init_287e2$();
    tmp$ = candidateIndexes.iterator();
    while (tmp$.hasNext()) {
      var i = tmp$.next();
      var result = merger(acc, $receiver.get_za3lpa$(i));
      if (result != null) {
        acc = result;
        indexesToRemove.add_11rb$(i);
      }
    }
    $receiver.set_wxm5ur$(mergeTo, acc);
    var tmp$_0;
    tmp$_0 = sortedDescending(indexesToRemove).iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      $receiver.removeAt_za3lpa$(element);
    }
  }
  var push = Kotlin.defineInlineFunction('ts2kt.ts2kt.utils.push_dxn8qf$', function ($receiver, element) {
    $receiver.push(element);
  });
  var shift = Kotlin.defineInlineFunction('ts2kt.ts2kt.utils.shift_4b5429$', function ($receiver) {
    return $receiver.shift();
  });
  var splice = Kotlin.defineInlineFunction('ts2kt.ts2kt.utils.splice_oo2f0p$', function ($receiver, index, removeCount, newItem) {
    return $receiver.splice(index, removeCount, newItem);
  });
  var package$ts2kt = _.ts2kt || (_.ts2kt = {});
  package$ts2kt.FileSystemBasedLSH = FileSystemBasedLSH;
  var package$kotlin = package$ts2kt.kotlin || (package$ts2kt.kotlin = {});
  var package$ast = package$kotlin.ast || (package$kotlin.ast = {});
  package$ast.KtVisitor = KtVisitor;
  package$ast.Output = Output;
  package$ast.indent_iwwqb4$ = indent;
  Object.defineProperty(package$ast, 'NO_IMPL', {
    get: function () {
      return NO_IMPL;
    }
  });
  package$ast.Stringify = Stringify;
  Object.defineProperty(package$ast, 'MODULE', {
    get: function () {
      return MODULE;
    }
  });
  Object.defineProperty(package$ast, 'FAKE_ANNOTATION', {
    get: function () {
      return FAKE_ANNOTATION;
    }
  });
  Object.defineProperty(package$ast, 'DEFAULT_FAKE_ANNOTATION', {
    get: function () {
      return DEFAULT_FAKE_ANNOTATION;
    }
  });
  Object.defineProperty(package$ast, 'isNotAnnotatedAsFake_8be2vx$', {
    get: function () {
      return isNotAnnotatedAsFake;
    }
  });
  package$ast.KtNode = KtNode;
  package$ast.AbstractKtNode = AbstractKtNode;
  package$ast.KtPackagePart = KtPackagePart;
  package$ast.KtNamed = KtNamed;
  package$ast.KtAnnotated = KtAnnotated;
  package$ast.KtMember = KtMember;
  package$ast.KtArgument = KtArgument;
  package$ast.KtAnnotation = KtAnnotation;
  Object.defineProperty(KtClassKind, 'CLASS', {
    get: KtClassKind$CLASS_getInstance
  });
  Object.defineProperty(KtClassKind, 'INTERFACE', {
    get: KtClassKind$INTERFACE_getInstance
  });
  Object.defineProperty(KtClassKind, 'ENUM', {
    get: KtClassKind$ENUM_getInstance
  });
  Object.defineProperty(KtClassKind, 'OBJECT', {
    get: KtClassKind$OBJECT_getInstance
  });
  Object.defineProperty(KtClassKind, 'COMPANION_OBJECT', {
    get: KtClassKind$COMPANION_OBJECT_getInstance
  });
  package$ast.KtClassKind = KtClassKind;
  package$ast.KtClassifier = KtClassifier;
  package$ast.KtFunParam = KtFunParam;
  package$ast.KtCallSignature = KtCallSignature;
  package$ast.KtFunction = KtFunction;
  package$ast.KtVariable = KtVariable;
  package$ast.KtEnumEntry = KtEnumEntry;
  package$ast.KtHeritageType = KtHeritageType;
  package$ast.KtTypeUnion_9gkjnr$ = KtTypeUnion;
  package$ast.KtTypeUnion = KtTypeUnion_0;
  package$ast.KtType = KtType;
  package$ast.KtTypeParam = KtTypeParam;
  package$ast.KtTypeAlias = KtTypeAlias;
  package$ast.KtTypeAlias_rc4xl$ = KtTypeAlias_0;
  package$ast.KtTypeAnnotation = KtTypeAnnotation;
  package$ast.stringify_22ngql$ = stringify;
  package$ast.stringify_nmavzd$ = stringify_0;
  package$ast.getFirstParamAsString_pqshe8$ = getFirstParamAsString;
  package$ast.isModule_c2z4xu$ = isModule;
  package$ast.hasModuleAnnotation_c2z4xu$ = hasModuleAnnotation;
  package$ast.getClassObject_c2z4xu$ = getClassObject;
  package$ast.get_escapedName_6yfz7e$ = get_escapedName;
  package$ast.createFunctionType_gor12u$ = createFunctionType;
  package$ts2kt.Visitor = Visitor;
  Object.defineProperty(package$ts2kt, 'ANY', {
    get: function () {
      return ANY;
    }
  });
  Object.defineProperty(package$ts2kt, 'NOTHING', {
    get: function () {
      return NOTHING;
    }
  });
  Object.defineProperty(package$ts2kt, 'NUMBER', {
    get: function () {
      return NUMBER;
    }
  });
  Object.defineProperty(package$ts2kt, 'STRING', {
    get: function () {
      return STRING;
    }
  });
  Object.defineProperty(package$ts2kt, 'BOOLEAN', {
    get: function () {
      return BOOLEAN;
    }
  });
  Object.defineProperty(package$ts2kt, 'UNIT', {
    get: function () {
      return UNIT;
    }
  });
  Object.defineProperty(package$ts2kt, 'DYNAMIC', {
    get: function () {
      return DYNAMIC;
    }
  });
  Object.defineProperty(package$ts2kt, 'ARRAY', {
    get: function () {
      return ARRAY;
    }
  });
  Object.defineProperty(package$ts2kt, 'NOTHING_TYPE', {
    get: function () {
      return NOTHING_TYPE;
    }
  });
  Object.defineProperty(package$ts2kt, 'SHOULD_BE_ESCAPED', {
    get: function () {
      return SHOULD_BE_ESCAPED;
    }
  });
  Object.defineProperty(package$ts2kt, 'NOT_OVERRIDE', {
    get: function () {
      return NOT_OVERRIDE;
    }
  });
  package$ts2kt.escapeIfNeed_pdl1vz$ = escapeIfNeed;
  package$ts2kt.get_isVararg_vn0qu$ = get_isVararg;
  package$ts2kt.toKotlinParam_58p3ac$ = toKotlinParam;
  package$ts2kt.toKotlinParamOverloads_58p3ac$ = toKotlinParamOverloads;
  package$ts2kt.toKotlinParamsOverloads_nexzm9$ = toKotlinParamsOverloads;
  package$ts2kt.toKotlinParams_nexzm9$ = toKotlinParams;
  package$ts2kt.toKotlinTypeParams_oqytn9$ = toKotlinTypeParams;
  package$ts2kt.toKotlinTypeParam_n2w6m6$ = toKotlinTypeParam;
  package$ts2kt.toKotlinCallSignatureOverloads_vrhhij$ = toKotlinCallSignatureOverloads;
  package$ts2kt.toKotlinCallSignature_vrhhij$ = toKotlinCallSignature;
  package$ts2kt.toKotlinCallSignature_8updhq$ = toKotlinCallSignature_0;
  package$ts2kt.toKotlinType_2bmiu8$ = toKotlinType;
  package$ts2kt.toKotlinTypeUnion_4psmbz$ = toKotlinTypeUnion_0;
  package$ts2kt.toKotlinType_4psmbz$ = toKotlinType_2;
  package$ts2kt.toKotlinTypeName_ybanly$ = toKotlinTypeName;
  package$ts2kt.toKotlinTypeUnion_ml8u72$ = toKotlinTypeUnion_1;
  package$ts2kt.toKotlinType_ogcl2v$ = toKotlinType_3;
  package$ts2kt.toKotlinTypeUnion_jcgfca$ = toKotlinTypeUnion_2;
  package$ts2kt.toKotlinTypeUnion_bxfq20$ = toKotlinTypeUnion_3;
  package$ts2kt.toKotlinType_pptu9f$ = toKotlinType_4;
  package$ts2kt.toKotlinType_d9acs6$ = toKotlinType_5;
  package$ts2kt.toKotlinType_s039ia$ = toKotlinType_6;
  package$ts2kt.forEachChild_elwn1m$ = forEachChild_0;
  package$ts2kt.visitNode_qofihj$ = visitNode;
  package$ts2kt.get_arr_wattn2$ = get_arr;
  $$importsForInline$$.typescript = $module$typescript;
  package$ts2kt.get_str_g3v1o4$ = get_str;
  package$ts2kt.get_id_g3v1o4$ = get_id;
  package$ts2kt.get_unescapedText_viuja6$ = get_unescapedText;
  package$ts2kt.location_xnn6i1$ = location;
  package$ts2kt.hasFlag_j50xv2$ = hasFlag;
  package$ts2kt.TsClassToKt = TsClassToKt;
  package$ts2kt.TsClassifierToKt = TsClassifierToKt;
  package$ts2kt.TsInterfaceToKt = TsInterfaceToKt;
  package$ts2kt.TsInterfaceToKtExtensions = TsInterfaceToKtExtensions;
  Object.defineProperty(package$ts2kt, 'NATIVE_ANNOTATION', {
    get: function () {
      return NATIVE_ANNOTATION;
    }
  });
  Object.defineProperty(package$ts2kt, 'NATIVE_GETTER_ANNOTATION_8be2vx$', {
    get: function () {
      return NATIVE_GETTER_ANNOTATION;
    }
  });
  Object.defineProperty(package$ts2kt, 'NATIVE_SETTER_ANNOTATION_8be2vx$', {
    get: function () {
      return NATIVE_SETTER_ANNOTATION;
    }
  });
  Object.defineProperty(package$ts2kt, 'NATIVE_INVOKE_ANNOTATION_8be2vx$', {
    get: function () {
      return NATIVE_INVOKE_ANNOTATION;
    }
  });
  Object.defineProperty(package$ts2kt, 'DEFAULT_ANNOTATION_8be2vx$', {
    get: function () {
      return DEFAULT_ANNOTATION;
    }
  });
  Object.defineProperty(package$ts2kt, 'NO_ANNOTATIONS_8be2vx$', {
    get: function () {
      return NO_ANNOTATIONS;
    }
  });
  Object.defineProperty(package$ts2kt, 'INVOKE_8be2vx$', {
    get: function () {
      return INVOKE;
    }
  });
  Object.defineProperty(package$ts2kt, 'GET_8be2vx$', {
    get: function () {
      return GET;
    }
  });
  Object.defineProperty(package$ts2kt, 'SET_8be2vx$', {
    get: function () {
      return SET;
    }
  });
  Object.defineProperty(package$ts2kt, 'COMPARE_BY_NAME_8be2vx$', {
    get: function () {
      return COMPARE_BY_NAME;
    }
  });
  Object.defineProperty(package$ts2kt, 'IS_NATIVE_ANNOTATION_8be2vx$', {
    get: function () {
      return IS_NATIVE_ANNOTATION;
    }
  });
  package$ts2kt.TypeScriptToKotlin = TypeScriptToKotlin;
  package$ts2kt.TypeScriptToKotlinBase = TypeScriptToKotlinBase;
  package$ts2kt.createClassifier_i0th2b$ = createClassifier;
  package$ts2kt.createClassifier_540sl8$ = createClassifier_0;
  package$ts2kt.ObjectTypeToKotlinTypeMapper = ObjectTypeToKotlinTypeMapper;
  Object.defineProperty(ObjectTypeToKotlinTypeMapperImpl, 'Companion', {
    get: ObjectTypeToKotlinTypeMapperImpl$Companion_getInstance
  });
  package$ts2kt.ObjectTypeToKotlinTypeMapperImpl = ObjectTypeToKotlinTypeMapperImpl;
  package$ts2kt.merge_rjnvub$ = merge;
  var package$typescript = _.typescript || (_.typescript = {});
  package$typescript.get_declarationName_jhg893$ = get_declarationName;
  package$typescript.get_identifierName_snzh8q$ = get_identifierName;
  package$typescript.get_identifierName_5s6jds$ = get_identifierName_0;
  package$typescript.get_propertyName_nwtuk7$ = get_propertyName;
  package$typescript.get_propertyName_ih1unk$ = get_propertyName_0;
  package$typescript.get_propertyName_prku36$ = get_propertyName_1;
  package$typescript.get_propertyName_1v1vnl$ = get_propertyName_2;
  package$typescript.get_propertyName_i42fc9$ = get_propertyName_3;
  package$typescript.get_identifierName_gcxvwa$ = get_identifierName_1;
  package$typescript.get_declarationName_czbci4$ = get_declarationName_0;
  package$typescript.get_propertyName_7v1fh7$ = get_propertyName_4;
  package$typescript.get_identifierName_x5rxe7$ = get_identifierName_2;
  package$typescript.get_propertyName_jnf2ws$ = get_propertyName_5;
  package$typescript.get_propertyName_va8bie$ = get_propertyName_6;
  package$typescript.set_propertyName_uy9yq9$ = set_propertyName;
  package$typescript.get_propertyName_68a97k$ = get_propertyName_7;
  package$typescript.get_identifierName_jlyuxx$ = get_identifierName_3;
  package$typescript.get_identifierName_j6kl1i$ = get_identifierName_4;
  package$typescript.get_identifierName_uulvm1$ = get_identifierName_5;
  package$typescript.get_identifierName_p0tzpc$ = get_identifierName_6;
  package$typescript.set_identifierName_x4zda$ = set_identifierName;
  package$typescript.get_identifierName_a9aw95$ = get_identifierName_7;
  package$typescript.set_identifierName_2zh5fb$ = set_identifierName_0;
  package$typescript.get_propertyName_q9hz09$ = get_propertyName_8;
  package$typescript.get_propertyName_rgranj$ = get_propertyName_9;
  package$typescript.get_identifierName_d15va$ = get_identifierName_8;
  package$typescript.get_identifierName_ewxmrr$ = get_identifierName_9;
  package$typescript.set_identifierName_eya9g$ = set_identifierName_1;
  package$typescript.get_declarationName_w16434$ = get_declarationName_1;
  package$typescript.get_identifierName_rferdy$ = get_identifierName_10;
  package$typescript.get_identifierName_23mu59$ = get_identifierName_11;
  package$typescript.get_identifierName_8phqdc$ = get_identifierName_12;
  package$typescript.get_identifierName_fs3q0n$ = get_identifierName_13;
  package$typescript.set_identifierName_9rwuhn$ = set_identifierName_2;
  package$typescript.get_identifierName_rlpjmb$ = get_identifierName_14;
  package$typescript.get_identifierName_287i12$ = get_identifierName_15;
  package$typescript.get_identifierName_lob3gp$ = get_identifierName_16;
  Object.defineProperty(DiagnosticLevel, 'EXCEPTION', {
    get: DiagnosticLevel$EXCEPTION_getInstance
  });
  Object.defineProperty(DiagnosticLevel, 'WARNING_WITH_STACKTRACE', {
    get: DiagnosticLevel$WARNING_WITH_STACKTRACE_getInstance
  });
  Object.defineProperty(DiagnosticLevel, 'WARNING', {
    get: DiagnosticLevel$WARNING_getInstance
  });
  Object.defineProperty(DiagnosticLevel, 'QUIET', {
    get: DiagnosticLevel$QUIET_getInstance
  });
  Object.defineProperty(DiagnosticLevel, 'Companion', {
    get: DiagnosticLevel$Companion_getInstance
  });
  var package$utils = package$ts2kt.utils || (package$ts2kt.utils = {});
  package$utils.DiagnosticLevel = DiagnosticLevel;
  Object.defineProperty(package$utils, 'diagnosticLevel_8be2vx$', {
    get: function () {
      return diagnosticLevel;
    },
    set: function (value) {
      diagnosticLevel = value;
    }
  });
  package$utils.report_61zpoe$ = report;
  package$utils.assert_8kj6y5$ = assert;
  package$utils.reportUnsupportedNode_uvf806$ = reportUnsupportedNode;
  Object.defineProperty(package$utils, 'trackUnsupportedKinds_8be2vx$', {
    get: function () {
      return trackUnsupportedKinds;
    },
    set: function (value) {
      trackUnsupportedKinds = value;
    }
  });
  package$utils.reportUnsupportedNodeAndGetMessage_uvf806$ = reportUnsupportedNodeAndGetMessage;
  package$utils.reportUnsupportedKinds = reportUnsupportedKinds;
  package$ts2kt.translateToFile_puj7f4$ = translateToFile;
  package$ts2kt.translateToDir_kmsbck$ = translateToDir;
  package$ts2kt.CliArguments = CliArguments;
  package$ts2kt.parseArguments = parseArguments;
  package$ts2kt.main_kand9s$ = main;
  Object.defineProperty(package$ts2kt, 'TYPESCRIPT_DEFINITION_FILE_EXT_8be2vx$', {
    get: function () {
      return TYPESCRIPT_DEFINITION_FILE_EXT;
    }
  });
  package$ts2kt.translate_61zpoe$ = translate;
  package$utils.cast_3752g7$ = cast;
  package$utils.join_57z5yl$ = join;
  package$utils.merge_wtasr7$ = merge_0;
  package$utils.push_dxn8qf$ = push;
  package$utils.shift_4b5429$ = shift;
  package$utils.splice_oo2f0p$ = splice;
  TypeScriptToKotlinBase.prototype.visitModuleDeclaration_ezg4eu$ = Visitor.prototype.visitModuleDeclaration_ezg4eu$;
  TypeScriptToKotlinBase.prototype.visitFunctionDeclaration_eywj3y$ = Visitor.prototype.visitFunctionDeclaration_eywj3y$;
  TypeScriptToKotlinBase.prototype.visitTypeAliasDeclaration_it7xrc$ = Visitor.prototype.visitTypeAliasDeclaration_it7xrc$;
  TypeScriptToKotlinBase.prototype.visitVariableStatement_x0poxd$ = Visitor.prototype.visitVariableStatement_x0poxd$;
  TypeScriptToKotlinBase.prototype.visitEnumDeclaration_1emvp1$ = Visitor.prototype.visitEnumDeclaration_1emvp1$;
  TypeScriptToKotlinBase.prototype.visitClassDeclaration_4wvyue$ = Visitor.prototype.visitClassDeclaration_4wvyue$;
  TypeScriptToKotlinBase.prototype.visitInterfaceDeclaration_f4u3$ = Visitor.prototype.visitInterfaceDeclaration_f4u3$;
  TypeScriptToKotlinBase.prototype.visitHeritageClause_10qtta$ = Visitor.prototype.visitHeritageClause_10qtta$;
  TypeScriptToKotlinBase.prototype.visitConstructorDeclaration_cz84f8$ = Visitor.prototype.visitConstructorDeclaration_cz84f8$;
  TypeScriptToKotlinBase.prototype.visitConstructSignatureDeclaration_cz84f8$ = Visitor.prototype.visitConstructSignatureDeclaration_cz84f8$;
  TypeScriptToKotlinBase.prototype.visitMethodDeclaration_7vsj57$ = Visitor.prototype.visitMethodDeclaration_7vsj57$;
  TypeScriptToKotlinBase.prototype.visitPropertyDeclaration_qnxew1$ = Visitor.prototype.visitPropertyDeclaration_qnxew1$;
  TypeScriptToKotlinBase.prototype.visitIndexSignature_53if9s$ = Visitor.prototype.visitIndexSignature_53if9s$;
  TypeScriptToKotlinBase.prototype.visitSignatureDeclaration_vb212e$ = Visitor.prototype.visitSignatureDeclaration_vb212e$;
  TypeScriptToKotlinBase.prototype.visitExportAssignment_fybyfv$ = Visitor.prototype.visitExportAssignment_fybyfv$;
  NO_IMPL = 'definedExternally';
  EQ_NO_IMPL = ' = definedExternally';
  NO_IMPL_PROPERTY_GETTER = ' get()' + EQ_NO_IMPL;
  NO_IMPL_PROPERTY_SETTER = ' set(value)' + EQ_NO_IMPL;
  EXTERNAL = 'external';
  OPEN = 'open';
  OVERRIDE = 'override';
  OPERATOR = 'operator';
  VAR = 'var';
  VAL = 'val';
  FUN = 'fun';
  VARARG = 'vararg';
  MODULE = 'module';
  FAKE = 'fake';
  FAKE_ANNOTATION = new KtAnnotation(FAKE);
  DEFAULT_FAKE_ANNOTATION = listOf(FAKE_ANNOTATION);
  isNotAnnotatedAsFake = isNotAnnotatedAsFake$lambda;
  ANY = 'Any';
  NOTHING = 'Nothing';
  NUMBER = 'Number';
  STRING = 'String';
  BOOLEAN = 'Boolean';
  UNIT = 'Unit';
  DYNAMIC = 'dynamic';
  ARRAY = 'Array';
  NOTHING_TYPE = new KtType(NOTHING, void 0, void 0, true);
  SHOULD_BE_ESCAPED = setOf(['as', 'break', 'class', 'continue', 'do', 'else', 'false', 'for', 'fun', 'if', 'in', 'interface', 'is', 'null', 'object', 'package', 'return', 'super', 'this', 'This', 'throw', 'true', 'try', 'typealias', 'typeof', 'val', 'var', 'when', 'while']);
  NOT_OVERRIDE = NOT_OVERRIDE$lambda;
  OVERLOAD_GEN_THRESHOLD_FOR_TYPE_COUNT_ON_ONE_PARAMETER = 10;
  OVERLOAD_GEN_THRESHOLD_FOR_TOTAL_COUNT = 10;
  JS_MODULE = 'JsModule';
  JS_QUALIFIER = 'JsQualifier';
  NATIVE = 'native';
  NATIVE_ANNOTATION = new KtAnnotation(NATIVE);
  NATIVE_GETTER_ANNOTATION = new KtAnnotation('nativeGetter');
  NATIVE_SETTER_ANNOTATION = new KtAnnotation('nativeSetter');
  NATIVE_INVOKE_ANNOTATION = new KtAnnotation('nativeInvoke');
  DEFAULT_ANNOTATION = listOf(NATIVE_ANNOTATION);
  NO_ANNOTATIONS = emptyList();
  INVOKE = 'invoke';
  GET = 'get';
  SET = 'set';
  COMPARE_BY_NAME = COMPARE_BY_NAME$lambda;
  IS_NATIVE_ANNOTATION = IS_NATIVE_ANNOTATION$lambda;
  diagnosticLevel = DiagnosticLevel$Companion_getInstance().DEFAULT;
  trackUnsupportedKinds = false;
  unsupportedKinds = HashMap_init();
  KOTLIN_FILE_EXT = '.kt';
  TYPESCRIPT_DEFINITION_FILE_EXT = '.d.ts';
  var tmp$ = listOf(getDefaultLibFilePath(getDefaultCompilerOptions()));
  var $receiver = listOf_0(['.', __dirname]);
  var destination = Kotlin.kotlin.collections.ArrayList_init_ww73n8$(Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$($receiver, 10));
  var tmp$_0;
  tmp$_0 = $receiver.iterator();
  while (tmp$_0.hasNext()) {
    var item = tmp$_0.next();
    destination.add_11rb$(item + '/lib/lib.d.ts');
  }
  var $receiver_0 = plus(tmp$, destination);
  var tmp$result;
  tmp$break: do {
    var tmp$_1;
    tmp$_1 = $receiver_0.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      if ($module$fs.existsSync(element)) {
        tmp$result = element;
        break tmp$break;
      }
    }
    throw new Kotlin.kotlin.NoSuchElementException('Collection contains no element matching the predicate.');
  }
   while (false);
  PATH_TO_LIB_D_TS = tmp$result;
  file2scriptSnapshotCache = Kotlin.kotlin.collections.HashMap_init_q3lmfv$();
  LIB_D_TS_WITH_SNAPSHOT = to('lib.d.ts', getScriptSnapshotFromFile(PATH_TO_LIB_D_TS));
  host = new FileSystemBasedLSH(Kotlin.kotlin.collections.emptyMap_q3lmfv$(), '');
  documentRegistry = createDocumentRegistry();
  languageService = createLanguageService(host, documentRegistry);
  main([]);
  Kotlin.defineModule('ts2kt', _);
  return _;
}(module.exports, require('./kotlin'), require('typescript'), require('path'), require('fs'), require('process')));
